datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m1(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte, e : Byte)
	@code "0x00"
	message m2(r1 : Byte, r0 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", c : Byte)
	@code "0x01"
	message m3(r5 : Byte, r3 : Byte, r2 : Byte, r4 : Byte, a : Byte)
	@code "0x02"
	message m1bis(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte, e : Byte)
	@code "0x03"
	message m2bis(r1 : Byte, r0 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", c : Byte)
	@code "0x04"
	message m3bis(r5 : Byte, r3 : Byte, r2 : Byte, r4 : Byte, a : Byte)
	@code "0x05"
	message m1abc(a : Byte @upsize "not", r7 : Byte, b : Byte @upsize "not", r6 : Byte, c : Byte)
	@code "0x06"
	message m1de(r8 : Byte, r10 : Byte, d : Byte, r9 : Byte, e : Byte)
	@code "0x07"
	message m2r1r0a(r1 : Byte, r11 : Byte, r0 : Byte, r12 : Byte, a : Byte @upsize "not")
	@code "0x08"
	message m2bc(r13 : Byte, b : Byte @upsize "not", r14 : Byte, r15 : Byte, c : Byte)
	@code "0x09"
	message m3r5r3r2(r5 : Byte, r16 : Byte, r17 : Byte, r3 : Byte, r2 : Byte)
	@code "0x0A"
	message m3r4a(r18 : Byte, r4 : Byte, r19 : Byte, r20 : Byte, a : Byte)
	@code "0x0B"
	message m1bisabcd(a : Byte @upsize "not", r21 : Byte, b : Byte @upsize "not", c : Byte, d : Byte)
	@code "0x0C"
	message m1bise(r23 : Byte, r22 : Byte, r25 : Byte, r24 : Byte, e : Byte)
	@code "0x0D"
	message m2bisr1r0(r28 : Byte, r26 : Byte, r27 : Byte, r1 : Byte, r0 : Byte)
	@code "0x0E"
	message m2bisabc(r29 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", r30 : Byte, c : Byte)
	@code "0x0F"
	message m3bisr5r3r2r4(r5 : Byte, r3 : Byte, r31 : Byte, r2 : Byte, r4 : Byte)
	@code "0x10"
	message m3bisa(r35 : Byte, r32 : Byte, r33 : Byte, r34 : Byte, a : Byte)
	@code "0x11"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3r5r3r2 sends m3r4a sends m3bisr5r3r2r4 sends m3bisa receives m1abc receives m1de receives m2r1r0a receives m2bc receives m1bisabcd receives m1bise receives m2bisr1r0 receives m2bisabc
	}
	internal port diversified {
		sends m1 sends m2r1r0a sends m2bc sends m2 sends m1bisabcd sends m1bise sends m1bis sends m2bisr1r0 sends m2bisabc sends m2bis receives m1 receives m2r1r0a receives m2bc receives m2 receives m1bisabcd receives m1bise receives m1bis receives m2bisr1r0 receives m2bisabc receives m2bis
	}
	property id : Byte
	statechart init WaitForM1 {
		on entry `
			var fs = require('fs');
			var writeable = fs.createWriteStream('out.log');
			process.stdout.write = process.stderr.write = writeable.write.bind(writeable);
		`
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
			transition -> WaitForM2
			event e : diversified?m1bis
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
			transition -> SendAck
			event e : diversified?m2bis
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				if (rnd()< 247) do
					if (rnd()< 240) do
						app!m3r5r3r2(rnd(), rnd(), rnd(), rnd(), rnd())
						app!m3r4a(rnd(), rnd(), rnd(), rnd(), id)
					end
					else do
						app!m3r4a(rnd(), rnd(), rnd(), rnd(), id)
						app!m3r5r3r2(rnd(), rnd(), rnd(), rnd(), rnd())
					end
				end
				else do
					if (rnd()< 101) do
						app!m3bisr5r3r2r4(rnd(), rnd(), rnd(), rnd(), rnd())
						app!m3bisa(rnd(), rnd(), rnd(), rnd(), id)
					end
					else do
						app!m3bisa(rnd(), rnd(), rnd(), rnd(), id)
						app!m3bisr5r3r2r4(rnd(), rnd(), rnd(), rnd(), rnd())
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1abc_and_m1de init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1abc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
					transition -> S3
					event ev : app?m1de
					action do
						d = ev.d
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1de
					action do
						d = ev.d
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1abc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2r1r0a_and_m2bc init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property r0 : Byte
				property a : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r1r0a
					action do
						r1 = ev.r1
						r0 = ev.r0
						a = ev.a
					end
					transition -> S3
					event ev : app?m2bc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r1r0a
					action do
						r1 = ev.r1
						r0 = ev.r0
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r1, r0, a, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1bis_from_m1bisabcd_and_m1bise init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1bisabcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
					transition -> S3
					event ev : app?m1bise
					action do
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1bise
					action do
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1bisabcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1bis(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
		region generate_m2bis_from_m2bisr1r0_and_m2bisabc init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property r0 : Byte
				property a : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2bisr1r0
					action do
						r1 = ev.r1
						r0 = ev.r0
					end
					transition -> S3
					event ev : app?m2bisabc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bisabc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2bisr1r0
					action do
						r1 = ev.r1
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2bis(r1, r0, a, b, c)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1abc sends m1de sends m2r1r0a sends m2bc sends m1bisabcd sends m1bise sends m2bisr1r0 sends m2bisabc receives m3r5r3r2 receives m3r4a receives m3bisr5r3r2r4 receives m3bisa
	}
	internal port diversified {
		sends m3 sends m3bisr5r3r2r4 sends m3bisa sends m3bis receives m3 receives m3bisr5r3r2r4 receives m3bisa receives m3bis
	}
	property counter : Integer = 0
	property start : Integer
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
			start = `new Date()`
		end
		state RUN {
			on entry do
				_c = rnd()% 100
				_d = rnd()% 50
				_e = rnd()% 25
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				if (rnd()< 85) do
					if (rnd()< 1) do
						app!m1abc(_a, rnd(), _b, rnd(), _c)
						app!m1de(rnd(), rnd(), _d, rnd(), _e)
					end
					else do
						app!m1de(rnd(), rnd(), _d, rnd(), _e)
						app!m1abc(_a, rnd(), _b, rnd(), _c)
					end
				end
				else do
					if (rnd()< 242) do
						app!m1bisabcd(_a, rnd(), _b, _c, _d)
						app!m1bise(rnd(), rnd(), rnd(), rnd(), _e)
					end
					else do
						app!m1bise(rnd(), rnd(), rnd(), rnd(), _e)
						app!m1bisabcd(_a, rnd(), _b, _c, _d)
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				if (rnd()< 168) do
					if (rnd()< 246) do
						app!m2r1r0a(rnd(), rnd(), rnd(), rnd(), _a)
						app!m2bc(rnd(), _b, rnd(), rnd(), _c)
					end
					else do
						app!m2bc(rnd(), _b, rnd(), rnd(), _c)
						app!m2r1r0a(rnd(), rnd(), rnd(), rnd(), _a)
					end
				end
				else do
					if (rnd()< 239) do
						app!m2bisr1r0(rnd(), rnd(), rnd(), rnd(), rnd())
						app!m2bisabc(rnd(), _a, _b, rnd(), _c)
					end
					else do
						app!m2bisabc(rnd(), _a, _b, rnd(), _c)
						app!m2bisr1r0(rnd(), rnd(), rnd(), rnd(), rnd())
					end
				end
				counter ++
			end
			transition -> STOP guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
			transition -> RUN
			event e : diversified?m3bis
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3bis
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry do
				println "#CLI: What are you waitin for? Christmas?"
				var duration : Integer = `new Date()` - start
				println "#CLI: took " , duration , "ms."
			end
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r5r3r2_and_m3r4a init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r3 : Byte
				property r2 : Byte
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r5r3r2
					action do
						r5 = ev.r5
						r3 = ev.r3
						r2 = ev.r2
					end
					transition -> S3
					event ev : app?m3r4a
					action do
						r4 = ev.r4
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r4a
					action do
						r4 = ev.r4
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r5r3r2
					action do
						r5 = ev.r5
						r3 = ev.r3
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r5, r3, r2, r4, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bis_from_m3bisr5r3r2r4_and_m3bisa init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r3 : Byte
				property r2 : Byte
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3bisr5r3r2r4
					action do
						r5 = ev.r5
						r3 = ev.r3
						r2 = ev.r2
						r4 = ev.r4
					end
					transition -> S3
					event ev : app?m3bisa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3bisa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3bisr5r3r2r4
					action do
						r5 = ev.r5
						r3 = ev.r3
						r2 = ev.r2
						r4 = ev.r4
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bis(r5, r3, r2, r4, a)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
