datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m3(r3 : Byte, a : Integer, r21 : Byte, r6 : Byte, r1 : Integer)
	@code "0x16"
	message m1(e : Byte, b : Byte@upsize "not", d : Byte, c : Byte, r0 : Integer, a : Byte@upsize "not", r22 : Byte, r7 : Byte, r4 : Byte)
	@code "0x17"
	message m2(r5 : Byte, c : Byte, b : Byte@upsize "not", r8 : Byte, a : Byte@upsize "not", r23 : Byte, r2 : Byte)
	@code "0x18"
	message m1cr0ar4b(a : Byte @upsize "not", c : Byte, r9 : Byte, r0 : Integer, b : Byte @upsize "not", r4 : Byte, r24 : Byte)
	@code "0x19"
	message m1ed(e : Byte, r10 : Byte, d : Byte, r25 : Byte)
	@code "0x1A"
	message m2c(r11 : Byte, c : Byte, r26 : Byte)
	@code "0x1B"
	message m2r5br2a(r12 : Byte, r27 : Byte, r2 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", r5 : Byte)
	@code "0x1C"
	message m3r3(r3 : Byte, r13 : Byte, r28 : Byte)
	@code "0x1D"
	message m3ar1(r14 : Byte, a : Integer, r1 : Integer, r29 : Byte)
	@code "0x1E"
	message m1cr0ar4bcr0a(c : Byte, a : Byte @upsize "not", r15 : Byte, r0 : Integer, r30 : Byte)
	@code "0x1F"
	message m1cr0ar4br4b(r31 : Byte, r16 : Byte, r4 : Byte, b : Byte @upsize "not")
	@code "0x20"
	message m1ede(r32 : Byte, e : Byte, r17 : Byte)
	@code "0x21"
	message m1edd(r18 : Byte, r33 : Byte, d : Byte)
	@code "0x22"
	message m2r5br2ar5br2(r34 : Byte, r5 : Byte, b : Byte @upsize "not", r2 : Byte, r19 : Byte)
	@code "0x23"
	message m2r5br2aa(a : Byte @upsize "not", r35 : Byte, r20 : Byte)
	@code "0x24"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3r3
	sends m3ar1 receives m2c receives m1cr0ar4bcr0a
		receives m1cr0ar4br4b receives m1ede receives m1edd receives m2r5br2ar5br2 receives m2r5br2aa
	}
	internal port diversified {
		sends m1 sends m2c sends m2 sends m1cr0ar4bcr0a sends m1cr0ar4br4b sends m1cr0ar4b sends m1ede sends m1edd sends m1ed sends m2r5br2ar5br2 sends m2r5br2aa sends m2r5br2a receives m1 receives m2c receives m2 receives m1cr0ar4bcr0a receives m1cr0ar4br4b receives m1cr0ar4b receives m1ede receives m1edd receives m1ed receives m2r5br2ar5br2 receives m2r5br2aa receives m2r5br2a
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "29" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m3r3(rnd(), rnd(), rnd())
					end
					do
						println "30" , ", " , rnd(), ", " , id , ", " , rnd(), ", " , rnd(), ", "
						app!m3ar1(rnd(), id, rnd(), rnd())
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1cr0ar4b_and_m1ed init INIT {
			composite state INIT init S1 {
				property c : Byte
				property r0 : Integer
				property a : Byte
				property r4 : Byte
				property b : Byte
				property e : Byte
				property d : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1cr0ar4b
					action do
						c = ev.c
						r0 = ev.r0
						a = ev.a
						r4 = ev.r4
						b = ev.b
					end
					transition -> S3
					event ev : diversified?m1ed
					action do
						e = ev.e
						d = ev.d
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ed
					action do
						e = ev.e
						d = ev.d
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1cr0ar4b
					action do
						c = ev.c
						r0 = ev.r0
						a = ev.a
						r4 = ev.r4
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(e, b, d, c, r0, a, rnd(), rnd(), r4)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2c_and_m2r5br2a init INIT {
			composite state INIT init S1 {
				property c : Byte
				property r5 : Byte
				property b : Byte
				property r2 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2c
					action do
						c = ev.c
					end
					transition -> S3
					event ev : diversified?m2r5br2a
					action do
						r5 = ev.r5
						b = ev.b
						r2 = ev.r2
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r5br2a
					action do
						r5 = ev.r5
						b = ev.b
						r2 = ev.r2
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2c
					action do
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r5, c, b, rnd(), a, rnd(), r2)
					end
					transition -> S1
				}
			}
		}
		region generate_m1cr0ar4b_from_m1cr0ar4bcr0a_and_m1cr0ar4br4b init INIT {
			composite state INIT init S1 {
				property c : Byte
				property r0 : Integer
				property a : Byte
				property r4 : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1cr0ar4bcr0a
					action do
						c = ev.c
						r0 = ev.r0
						a = ev.a
					end
					transition -> S3
					event ev : app?m1cr0ar4br4b
					action do
						r4 = ev.r4
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1cr0ar4br4b
					action do
						r4 = ev.r4
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1cr0ar4bcr0a
					action do
						c = ev.c
						r0 = ev.r0
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1cr0ar4b(a, c, rnd(), r0, b, r4, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1ed_from_m1ede_and_m1edd init INIT {
			composite state INIT init S1 {
				property e : Byte
				property d : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1ede
					action do
						e = ev.e
					end
					transition -> S3
					event ev : app?m1edd
					action do
						d = ev.d
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1edd
					action do
						d = ev.d
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1ede
					action do
						e = ev.e
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ed(e, rnd(), d, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2r5br2a_from_m2r5br2ar5br2_and_m2r5br2aa init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property b : Byte
				property r2 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r5br2ar5br2
					action do
						r5 = ev.r5
						b = ev.b
						r2 = ev.r2
					end
					transition -> S3
					event ev : app?m2r5br2aa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r5br2aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r5br2ar5br2
					action do
						r5 = ev.r5
						b = ev.b
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r5br2a(rnd(), rnd(), r2, a, b, r5)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m2c sends m1cr0ar4bcr0a
		sends m1cr0ar4br4b sends m1ede sends m1edd sends m2r5br2ar5br2 sends m2r5br2aa receives m3r3
	receives m3ar1
	}
	internal port diversified {
		sends m3 receives m3
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						do
							println "31" , ", " , _c , ", " , _a , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1cr0ar4bcr0a(_c, _a, rnd(), rnd(), rnd())
						end
						do
							println "32" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", "
							app!m1cr0ar4br4b(rnd(), rnd(), rnd(), _b)
						end
					end
					do
						do
							println "33" , ", " , rnd(), ", " , _e , ", " , rnd(), ", "
							app!m1ede(rnd(), _e, rnd())
						end
						do
							println "34" , ", " , rnd(), ", " , rnd(), ", " , _d , ", "
							app!m1edd(rnd(), rnd(), _d)
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						println "27" , ", " , rnd(), ", " , _c , ", " , rnd(), ", "
						app!m2c(rnd(), _c, rnd())
					end
					do
						do
							println "35" , ", " , rnd(), ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", "
							app!m2r5br2ar5br2(rnd(), rnd(), _b, rnd(), rnd())
						end
						do
							println "36" , ", " , _a , ", " , rnd(), ", " , rnd(), ", "
							app!m2r5br2aa(_a, rnd(), rnd())
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r3_and_m3ar1 init INIT {
			composite state INIT init S1 {
				property r3 : Byte
				property a : Integer
				property r1 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r3
					action do
						r3 = ev.r3
					end
					transition -> S3
					event ev : app?m3ar1
					action do
						a = ev.a
						r1 = ev.r1
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3ar1
					action do
						a = ev.a
						r1 = ev.r1
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r3
					action do
						r3 = ev.r3
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r3, a, rnd(), rnd(), r1)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
