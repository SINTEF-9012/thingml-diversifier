datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m3(a : Byte)
	@code "0x00"
	message m2(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte)
	@code "0x01"
	message m1(a : Byte @upsize "not", b : Byte @upsize "not", c : Integer, d : Byte @weakparam "true", e : Byte)
	@code "0x02"
	message m3_()
	@code "0x03"
	message m3a(a : Byte)
	@code "0x04"
	message m2a(a : Byte @upsize "not")
	@code "0x05"
	message m2bc(b : Byte @upsize "not", c : Byte)
	@code "0x06"
	message m1abc(a : Byte @upsize "not", b : Byte @upsize "not", c : Integer)
	@code "0x07"
	message m1de(d : Byte @weakparam "true", e : Byte)
	@code "0x08"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3_ sends m3a receives m2a receives m2bc receives m1abc receives m1de
	}
	internal port diversified {
		sends m2 sends m1abc sends m1de sends m1 receives m2 receives m1abc receives m1de receives m1
	}
	property id : Byte
	statechart init WaitForM1 {
		on entry `
			var fs = require('fs');
			process.writeable = fs.createWriteStream('out.log');
			process.stdout.write = process.stderr.write = process.writeable.write.bind(process.writeable);
		`
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "3" , ','
						println ":" , "Byte" , ','
						println "?" , "0" , ','
						app!m3_()
					end
					do
						var m3aArg0 : Byte = id
						println "4" , ',' , `((` & m3aArg0 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ','
						println "?" , "0" , ',' , "0" , ','
						app!m3a(m3aArg0)
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m2_from_m2a_and_m2bc init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m2bc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(a, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1_from_m1abc_and_m1de init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Integer
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1abc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
					transition -> S3
					event ev : app?m1de
					action do
						d = ev.d
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1de
					action do
						d = ev.d
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1abc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m2a sends m2bc sends m1abc sends m1de receives m3_ receives m3a
	}
	internal port diversified {
		sends m3 receives m3
	}
	property counter : Integer = 0
	property start : Integer
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = 0x02
			start = `new Date()`
		end
		state RUN {
			on entry do
				_c = rnd()% 20
				_d = rnd()% 10 + 20
				_e = rnd()% 5 + 10
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						var m1abcArg0 : Byte = _a
						var m1abcArg1 : Byte = _b
						var m1abcArg2 : Integer = _c
						println "7" , ',' , `((` & m1abcArg0 & ` >> 0) & 0xFF)` , ',' , `((` & m1abcArg1 & ` >> 0) & 0xFF)` , ',' , `((` & m1abcArg2 & ` >> 8) & 0xFF)` , ',' , `((` & m1abcArg2 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ',' , "Byte" , ',' , "Integer" , ',' , "Integer" , ','
						println "?" , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ','
						app!m1abc(m1abcArg0, m1abcArg1, m1abcArg2)
					end
					do
						var m1deArg0 : Byte = _d
						var m1deArg1 : Byte = _e
						println "8" , ',' , `((` & m1deArg0 & ` >> 0) & 0xFF)` , ',' , `((` & m1deArg1 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ',' , "Byte" , ','
						println "?" , "0" , ',' , "1" , ',' , "0" , ','
						app!m1de(m1deArg0, m1deArg1)
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						var m2bcArg0 : Byte = _b
						var m2bcArg1 : Byte = _c
						println "6" , ',' , `((` & m2bcArg0 & ` >> 0) & 0xFF)` , ',' , `((` & m2bcArg1 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ',' , "Byte" , ','
						println "?" , "0" , ',' , "0" , ',' , "0" , ','
						app!m2bc(m2bcArg0, m2bcArg1)
					end
					do
						var m2aArg0 : Byte = _a
						println "5" , ',' , `((` & m2aArg0 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ','
						println "?" , "0" , ',' , "0" , ','
						app!m2a(m2aArg0)
					end
				end
				counter ++
			end
			transition -> STOP
			event e : diversified?m3
			guard counter >= 5
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a and counter < 5
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry do
				println "#CLI: What are you waitin for? Christmas?"
				var duration : Integer = `new Date()` - start
				println "#CLI: took " , duration , "ms."
			`process.writeable.end(() => {
					process.exit(0);
				})`
			end
		}
		final state ERROR {
			on entry do
				println "#CLI: Heh, heh, heh... what a mess!"
			`process.exit(1);`
			end
		}
		region generate_m3_from_m3__and_m3a init INIT {
			composite state INIT init S1 {
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3_
					action do
					end
					transition -> S3
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3_
					action do
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(a)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
