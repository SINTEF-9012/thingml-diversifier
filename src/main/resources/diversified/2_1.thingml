datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m1(e : Integer, r6 : Byte, a : Byte@upsize "not", r17 : Byte, r3 : Byte, d : Byte, c : Byte, r2 : Integer, b : Byte@upsize "not")
	@code "0x5B"
	message m3(a : Integer, r7 : Byte, r1 : Byte, r4 : Integer, r18 : Byte)
	@code "0x5C"
	message m2(r8 : Byte, c : Byte, r19 : Byte, a : Byte@upsize "not", r5 : Byte, b : Byte@upsize "not", r0 : Byte)
	@code "0x5D"
	message m3r4a(r20 : Byte, r4 : Integer, r9 : Byte, a : Integer)
	@code "0x5E"
	message m3r1(r1 : Byte, r21 : Byte, r10 : Byte)
	@code "0x5F"
	message m1cabdr3e(r22 : Byte, r3 : Byte, e : Integer, d : Byte, c : Byte, r11 : Byte, b : Byte @upsize "not", a : Byte @upsize "not")
	@code "0x60"
	message m1r2(r2 : Integer, r23 : Byte, r12 : Byte)
	@code "0x61"
	message m2r5(r5 : Byte, r13 : Byte, r24 : Byte)
	@code "0x62"
	message m2cbr0a(a : Byte @upsize "not", r0 : Byte, r14 : Byte, b : Byte @upsize "not", c : Byte, r25 : Byte)
	@code "0x63"
	message m2cbr0acbr0(r15 : Byte, b : Byte @upsize "not", r26 : Byte, c : Byte, r0 : Byte)
	@code "0x64"
	message m2cbr0aa(r16 : Byte, a : Byte @upsize "not", r27 : Byte)
	@code "0x65"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3r4a
	sends m3r1 receives m1cabdr3e receives m1r2
		receives m2r5 receives m2cbr0acbr0 receives m2cbr0aa
	}
	internal port diversified {
		sends m1 sends m2r5 sends m2 sends m2cbr0acbr0 sends m2cbr0aa sends m2cbr0a receives m1 receives m2r5 receives m2 receives m2cbr0acbr0 receives m2cbr0aa receives m2cbr0a
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "94" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
						app!m3r4a(rnd(), rnd(), rnd(), id)
					end
					do
						println "95" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m3r1(rnd(), rnd(), rnd())
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1cabdr3e_and_m1r2 init INIT {
			composite state INIT init S1 {
				property c : Byte
				property a : Byte
				property b : Byte
				property d : Byte
				property r3 : Byte
				property e : Integer
				property r2 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1cabdr3e
					action do
						c = ev.c
						a = ev.a
						b = ev.b
						d = ev.d
						r3 = ev.r3
						e = ev.e
					end
					transition -> S3
					event ev : app?m1r2
					action do
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1r2
					action do
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1cabdr3e
					action do
						c = ev.c
						a = ev.a
						b = ev.b
						d = ev.d
						r3 = ev.r3
						e = ev.e
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(e, rnd(), a, rnd(), r3, d, c, r2, b)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2r5_and_m2cbr0a init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property c : Byte
				property b : Byte
				property r0 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r5
					action do
						r5 = ev.r5
					end
					transition -> S3
					event ev : diversified?m2cbr0a
					action do
						c = ev.c
						b = ev.b
						r0 = ev.r0
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2cbr0a
					action do
						c = ev.c
						b = ev.b
						r0 = ev.r0
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r5
					action do
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(rnd(), c, rnd(), a, r5, b, r0)
					end
					transition -> S1
				}
			}
		}
		region generate_m2cbr0a_from_m2cbr0acbr0_and_m2cbr0aa init INIT {
			composite state INIT init S1 {
				property c : Byte
				property b : Byte
				property r0 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2cbr0acbr0
					action do
						c = ev.c
						b = ev.b
						r0 = ev.r0
					end
					transition -> S3
					event ev : app?m2cbr0aa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2cbr0aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2cbr0acbr0
					action do
						c = ev.c
						b = ev.b
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2cbr0a(a, r0, rnd(), b, c, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1cabdr3e sends m1r2
		sends m2r5 sends m2cbr0acbr0 sends m2cbr0aa receives m3r4a
	receives m3r1
	}
	internal port diversified {
		sends m3 receives m3
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						println "96" , ", " , rnd(), ", " , rnd(), ", " , _e , ", " , _d , ", " , _c , ", " , rnd(), ", " , _b , ", " , _a , ", "
						app!m1cabdr3e(rnd(), rnd(), _e, _d, _c, rnd(), _b, _a)
					end
					do
						println "97" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m1r2(rnd(), rnd(), rnd())
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						println "98" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m2r5(rnd(), rnd(), rnd())
					end
					do
						do
							println "100" , ", " , rnd(), ", " , _b , ", " , rnd(), ", " , _c , ", " , rnd(), ", "
							app!m2cbr0acbr0(rnd(), _b, rnd(), _c, rnd())
						end
						do
							println "101" , ", " , rnd(), ", " , _a , ", " , rnd(), ", "
							app!m2cbr0aa(rnd(), _a, rnd())
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r4a_and_m3r1 init INIT {
			composite state INIT init S1 {
				property r4 : Integer
				property a : Integer
				property r1 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r4a
					action do
						r4 = ev.r4
						a = ev.a
					end
					transition -> S3
					event ev : app?m3r1
					action do
						r1 = ev.r1
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r1
					action do
						r1 = ev.r1
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r4a
					action do
						r4 = ev.r4
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(a, rnd(), r1, r4, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
