datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m3(r70 : Byte, a : Integer, r41 : Byte, r9 : Byte, r3 : Integer, r99 : Byte, r8 : Integer, r12 : Byte, r2 : Byte)
	@code "0xE5"
	message m1(r42 : Byte, r100 : Byte, r13 : Byte, e : Byte, r10 : Integer, d : Integer, r71 : Byte, r0 : Integer, a : Byte@upsize "not", r7 : Byte, r4 : Byte, b : Byte@upsize "not", c : Byte)
	@code "0xE6"
	message m2(r14 : Byte, r72 : Byte, b : Byte@upsize "not", r43 : Byte, r1 : Integer, r11 : Byte, r5 : Byte, r6 : Integer, r101 : Byte, c : Byte, a : Byte@upsize "not")
	@code "0xE7"
	message m3r2r3r9(r73 : Byte, r44 : Byte, r102 : Byte, r15 : Byte, r9 : Byte, r2 : Byte, r3 : Integer)
	@code "0xE8"
	message m3r8a(r45 : Byte, r16 : Byte, r8 : Integer, a : Integer, r74 : Byte, r103 : Byte)
	@code "0xE9"
	message m1edr10(r46 : Byte, r10 : Integer, d : Integer, e : Byte, r17 : Byte, r75 : Byte, r104 : Byte)
	@code "0xEA"
	message m1r4r0abcr7(a : Byte @upsize "not", b : Byte @upsize "not", r47 : Byte, r7 : Byte, r18 : Byte, r0 : Integer, r4 : Byte, r105 : Byte, r76 : Byte, c : Byte)
	@code "0xEB"
	message m2r5r1r11a(r48 : Byte, r106 : Byte, r5 : Byte, a : Byte @upsize "not", r77 : Byte, r11 : Byte, r19 : Byte, r1 : Integer)
	@code "0xEC"
	message m2r6bc(r78 : Byte, b : Byte @upsize "not", r20 : Byte, r6 : Integer, r49 : Byte, c : Byte, r107 : Byte)
	@code "0xED"
	message m3r2r3r9r2(r2 : Byte, r21 : Byte, r108 : Byte, r50 : Byte, r79 : Byte)
	@code "0xEE"
	message m3r2r3r9r3r9(r51 : Byte, r3 : Integer, r80 : Byte, r22 : Byte, r9 : Byte, r109 : Byte)
	@code "0xEF"
	message m3r8ar8(r52 : Byte, r23 : Byte, r110 : Byte, r8 : Integer, r81 : Byte)
	@code "0xF0"
	message m3r8aa(a : Integer, r111 : Byte, r82 : Byte, r53 : Byte, r24 : Byte)
	@code "0xF1"
	message m1r4r0abcr7r4r0ab(r0 : Integer, r4 : Byte, a : Byte @upsize "not", r112 : Byte, b : Byte @upsize "not", r54 : Byte, r25 : Byte, r83 : Byte)
	@code "0xF2"
	message m1r4r0abcr7cr7(r113 : Byte, r7 : Byte, r26 : Byte, r55 : Byte, r84 : Byte, c : Byte)
	@code "0xF3"
	message m2r5r1r11ar5r1r11(r5 : Byte, r27 : Byte, r1 : Integer, r11 : Byte, r114 : Byte, r85 : Byte, r56 : Byte)
	@code "0xF4"
	message m2r5r1r11aa(r86 : Byte, r57 : Byte, a : Byte @upsize "not", r28 : Byte, r115 : Byte)
	@code "0xF5"
	message m2r6bcr6b(b : Byte @upsize "not", r6 : Integer, r29 : Byte, r58 : Byte, r116 : Byte, r87 : Byte)
	@code "0xF6"
	message m2r6bcc(r88 : Byte, r59 : Byte, r30 : Byte, r117 : Byte, c : Byte)
	@code "0xF7"
	message m3r2r3r9r3r9r3(r3 : Integer, r31 : Byte, r89 : Byte, r118 : Byte, r60 : Byte)
	@code "0xF8"
	message m3r2r3r9r3r9r9(r119 : Byte, r90 : Byte, r9 : Byte, r32 : Byte, r61 : Byte)
	@code "0xF9"
	message m2r5r1r11ar5r1r11r5r1(r62 : Byte, r1 : Integer, r5 : Byte, r120 : Byte, r33 : Byte, r91 : Byte)
	@code "0xFA"
	message m2r5r1r11ar5r1r11r11(r34 : Byte, r121 : Byte, r92 : Byte, r63 : Byte, r11 : Byte)
	@code "0xFB"
	message m1r4r0abcr7r4r0abr4(r35 : Byte, r4 : Byte, r93 : Byte, r122 : Byte, r64 : Byte)
	@code "0xFC"
	message m1r4r0abcr7r4r0abr0ab(r36 : Byte, r123 : Byte, r65 : Byte, r94 : Byte, b : Byte @upsize "not", a : Byte @upsize "not", r0 : Integer)
	@code "0xFD"
	message m1r4r0abcr7cr7c(r124 : Byte, r37 : Byte, r95 : Byte, r66 : Byte, c : Byte)
	@code "0xFE"
	message m1r4r0abcr7cr7r7(r67 : Byte, r125 : Byte, r7 : Byte, r96 : Byte, r38 : Byte)
	@code "0xFF"
	message m2r5r1r11ar5r1r11r5r1r5(r68 : Byte, r39 : Byte, r5 : Byte, r97 : Byte, r126 : Byte)
	@code "0x00"
	message m2r5r1r11ar5r1r11r5r1r1(r98 : Byte, r69 : Byte, r40 : Byte, r1 : Integer, r127 : Byte)
	@code "0x01"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3r2r3r9r2
	sends m3r8ar8 sends m3r8aa sends m3r2r3r9r3r9r3 sends m3r2r3r9r3r9r9 receives m1edr10 receives m2r5r1r11aa
		receives m2r6bcr6b receives m2r6bcc receives m2r5r1r11ar5r1r11r11 receives m1r4r0abcr7r4r0abr4 receives m1r4r0abcr7r4r0abr0ab receives m1r4r0abcr7cr7c receives m1r4r0abcr7cr7r7 receives m2r5r1r11ar5r1r11r5r1r5 receives m2r5r1r11ar5r1r11r5r1r1
	}
	internal port diversified {
		sends m1 sends m2 sends m1r4r0abcr7 sends m2r5r1r11aa sends m2r5r1r11a sends m2r6bcr6b sends m2r6bcc sends m2r6bc sends m2r5r1r11ar5r1r11r11 sends m2r5r1r11ar5r1r11 sends m1r4r0abcr7r4r0abr4 sends m1r4r0abcr7r4r0abr0ab sends m1r4r0abcr7r4r0ab sends m1r4r0abcr7cr7c sends m1r4r0abcr7cr7r7 sends m1r4r0abcr7cr7 sends m2r5r1r11ar5r1r11r5r1r5 sends m2r5r1r11ar5r1r11r5r1r1 sends m2r5r1r11ar5r1r11r5r1 receives m1 receives m2 receives m1r4r0abcr7 receives m2r5r1r11aa receives m2r5r1r11a receives m2r6bcr6b receives m2r6bcc receives m2r6bc receives m2r5r1r11ar5r1r11r11 receives m2r5r1r11ar5r1r11 receives m1r4r0abcr7r4r0abr4 receives m1r4r0abcr7r4r0abr0ab receives m1r4r0abcr7r4r0ab receives m1r4r0abcr7cr7c receives m1r4r0abcr7cr7r7 receives m1r4r0abcr7cr7 receives m2r5r1r11ar5r1r11r5r1r5 receives m2r5r1r11ar5r1r11r5r1r1 receives m2r5r1r11ar5r1r11r5r1
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						do
							println "-18" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r2r3r9r2(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "-8" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r2r3r9r3r9r3(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "-7" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r2r3r9r3r9r9(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
					end
					do
						do
							println "-16" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r8ar8(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							println "-15" , ", " , id , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r8aa(id, rnd(), rnd(), rnd(), rnd())
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1edr10_and_m1r4r0abcr7 init INIT {
			composite state INIT init S1 {
				property e : Byte
				property d : Integer
				property r10 : Integer
				property r4 : Byte
				property r0 : Integer
				property a : Byte
				property b : Byte
				property c : Byte
				property r7 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1edr10
					action do
						e = ev.e
						d = ev.d
						r10 = ev.r10
					end
					transition -> S3
					event ev : diversified?m1r4r0abcr7
					action do
						r4 = ev.r4
						r0 = ev.r0
						a = ev.a
						b = ev.b
						c = ev.c
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1r4r0abcr7
					action do
						r4 = ev.r4
						r0 = ev.r0
						a = ev.a
						b = ev.b
						c = ev.c
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1edr10
					action do
						e = ev.e
						d = ev.d
						r10 = ev.r10
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(rnd(), rnd(), rnd(), e, r10, d, rnd(), r0, a, r7, r4, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2r5r1r11a_and_m2r6bc init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r1 : Integer
				property r11 : Byte
				property a : Byte
				property r6 : Integer
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2r5r1r11a
					action do
						r5 = ev.r5
						r1 = ev.r1
						r11 = ev.r11
						a = ev.a
					end
					transition -> S3
					event ev : diversified?m2r6bc
					action do
						r6 = ev.r6
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r6bc
					action do
						r6 = ev.r6
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r5r1r11a
					action do
						r5 = ev.r5
						r1 = ev.r1
						r11 = ev.r11
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(rnd(), rnd(), b, rnd(), r1, r11, r5, r6, rnd(), c, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m1r4r0abcr7_from_m1r4r0abcr7r4r0ab_and_m1r4r0abcr7cr7 init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property r0 : Integer
				property a : Byte
				property b : Byte
				property c : Byte
				property r7 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1r4r0abcr7r4r0ab
					action do
						r4 = ev.r4
						r0 = ev.r0
						a = ev.a
						b = ev.b
					end
					transition -> S3
					event ev : diversified?m1r4r0abcr7cr7
					action do
						c = ev.c
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1r4r0abcr7cr7
					action do
						c = ev.c
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1r4r0abcr7r4r0ab
					action do
						r4 = ev.r4
						r0 = ev.r0
						a = ev.a
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1r4r0abcr7(a, b, rnd(), r7, rnd(), r0, r4, rnd(), rnd(), c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r5r1r11a_from_m2r5r1r11ar5r1r11_and_m2r5r1r11aa init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r1 : Integer
				property r11 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2r5r1r11ar5r1r11
					action do
						r5 = ev.r5
						r1 = ev.r1
						r11 = ev.r11
					end
					transition -> S3
					event ev : app?m2r5r1r11aa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r5r1r11aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r5r1r11ar5r1r11
					action do
						r5 = ev.r5
						r1 = ev.r1
						r11 = ev.r11
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r5r1r11a(rnd(), rnd(), r5, a, rnd(), r11, rnd(), r1)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r6bc_from_m2r6bcr6b_and_m2r6bcc init INIT {
			composite state INIT init S1 {
				property r6 : Integer
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r6bcr6b
					action do
						r6 = ev.r6
						b = ev.b
					end
					transition -> S3
					event ev : app?m2r6bcc
					action do
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r6bcc
					action do
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r6bcr6b
					action do
						r6 = ev.r6
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r6bc(rnd(), b, rnd(), r6, rnd(), c, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2r5r1r11ar5r1r11_from_m2r5r1r11ar5r1r11r5r1_and_m2r5r1r11ar5r1r11r11 init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r1 : Integer
				property r11 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2r5r1r11ar5r1r11r5r1
					action do
						r5 = ev.r5
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m2r5r1r11ar5r1r11r11
					action do
						r11 = ev.r11
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r5r1r11ar5r1r11r11
					action do
						r11 = ev.r11
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r5r1r11ar5r1r11r5r1
					action do
						r5 = ev.r5
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r5r1r11ar5r1r11(r5, rnd(), r1, r11, rnd(), rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1r4r0abcr7r4r0ab_from_m1r4r0abcr7r4r0abr4_and_m1r4r0abcr7r4r0abr0ab init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property r0 : Integer
				property a : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1r4r0abcr7r4r0abr4
					action do
						r4 = ev.r4
					end
					transition -> S3
					event ev : app?m1r4r0abcr7r4r0abr0ab
					action do
						r0 = ev.r0
						a = ev.a
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1r4r0abcr7r4r0abr0ab
					action do
						r0 = ev.r0
						a = ev.a
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1r4r0abcr7r4r0abr4
					action do
						r4 = ev.r4
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1r4r0abcr7r4r0ab(r0, r4, a, rnd(), b, rnd(), rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1r4r0abcr7cr7_from_m1r4r0abcr7cr7c_and_m1r4r0abcr7cr7r7 init INIT {
			composite state INIT init S1 {
				property c : Byte
				property r7 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1r4r0abcr7cr7c
					action do
						c = ev.c
					end
					transition -> S3
					event ev : app?m1r4r0abcr7cr7r7
					action do
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1r4r0abcr7cr7r7
					action do
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1r4r0abcr7cr7c
					action do
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1r4r0abcr7cr7(rnd(), r7, rnd(), rnd(), rnd(), c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r5r1r11ar5r1r11r5r1_from_m2r5r1r11ar5r1r11r5r1r5_and_m2r5r1r11ar5r1r11r5r1r1 init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r1 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r5r1r11ar5r1r11r5r1r5
					action do
						r5 = ev.r5
					end
					transition -> S3
					event ev : app?m2r5r1r11ar5r1r11r5r1r1
					action do
						r1 = ev.r1
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r5r1r11ar5r1r11r5r1r1
					action do
						r1 = ev.r1
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r5r1r11ar5r1r11r5r1r5
					action do
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r5r1r11ar5r1r11r5r1(rnd(), r1, r5, rnd(), rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1edr10 sends m2r5r1r11aa
		sends m2r6bcr6b sends m2r6bcc sends m2r5r1r11ar5r1r11r11 sends m1r4r0abcr7r4r0abr4 sends m1r4r0abcr7r4r0abr0ab sends m1r4r0abcr7cr7c sends m1r4r0abcr7cr7r7 sends m2r5r1r11ar5r1r11r5r1r5 sends m2r5r1r11ar5r1r11r5r1r1 receives m3r2r3r9r2
	receives m3r8ar8 receives m3r8aa receives m3r2r3r9r3r9r3 receives m3r2r3r9r3r9r9
	}
	internal port diversified {
		sends m3 sends m3r2r3r9r2 sends m3r2r3r9 sends m3r8ar8 sends m3r8aa sends m3r8a sends m3r2r3r9r3r9r3 sends m3r2r3r9r3r9r9 sends m3r2r3r9r3r9 receives m3 receives m3r2r3r9r2 receives m3r2r3r9 receives m3r8ar8 receives m3r8aa receives m3r8a receives m3r2r3r9r3r9r3 receives m3r2r3r9r3r9r9 receives m3r2r3r9r3r9
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						println "-22" , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , _e , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m1edr10(rnd(), rnd(), _d, _e, rnd(), rnd(), rnd())
					end
					do
						do
							do
								println "-4" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1r4r0abcr7r4r0abr4(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "-3" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _a , ", " , rnd(), ", "
								app!m1r4r0abcr7r4r0abr0ab(rnd(), rnd(), rnd(), rnd(), _b, _a, rnd())
							end
						end
						do
							do
								println "-2" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", "
								app!m1r4r0abcr7cr7c(rnd(), rnd(), rnd(), rnd(), _c)
							end
							do
								println "-1" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1r4r0abcr7cr7r7(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						do
							do
								do
									println "0" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m2r5r1r11ar5r1r11r5r1r5(rnd(), rnd(), rnd(), rnd(), rnd())
								end
								do
									println "1" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m2r5r1r11ar5r1r11r5r1r1(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
							do
								println "-5" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m2r5r1r11ar5r1r11r11(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							println "-11" , ", " , rnd(), ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", "
							app!m2r5r1r11aa(rnd(), rnd(), _a, rnd(), rnd())
						end
					end
					do
						do
							println "-10" , ", " , _b , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r6bcr6b(_b, rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							println "-9" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", "
							app!m2r6bcc(rnd(), rnd(), rnd(), rnd(), _c)
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r2r3r9_and_m3r8a init INIT {
			composite state INIT init S1 {
				property r2 : Byte
				property r3 : Integer
				property r9 : Byte
				property r8 : Integer
				property a : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3r2r3r9
					action do
						r2 = ev.r2
						r3 = ev.r3
						r9 = ev.r9
					end
					transition -> S3
					event ev : diversified?m3r8a
					action do
						r8 = ev.r8
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r8a
					action do
						r8 = ev.r8
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r2r3r9
					action do
						r2 = ev.r2
						r3 = ev.r3
						r9 = ev.r9
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(rnd(), a, rnd(), r9, r3, rnd(), r8, rnd(), r2)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r2r3r9_from_m3r2r3r9r2_and_m3r2r3r9r3r9 init INIT {
			composite state INIT init S1 {
				property r2 : Byte
				property r3 : Integer
				property r9 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r2r3r9r2
					action do
						r2 = ev.r2
					end
					transition -> S3
					event ev : diversified?m3r2r3r9r3r9
					action do
						r3 = ev.r3
						r9 = ev.r9
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r2r3r9r3r9
					action do
						r3 = ev.r3
						r9 = ev.r9
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r2r3r9r2
					action do
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r2r3r9(rnd(), rnd(), rnd(), rnd(), r9, r2, r3)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r8a_from_m3r8ar8_and_m3r8aa init INIT {
			composite state INIT init S1 {
				property r8 : Integer
				property a : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r8ar8
					action do
						r8 = ev.r8
					end
					transition -> S3
					event ev : app?m3r8aa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r8aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r8ar8
					action do
						r8 = ev.r8
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r8a(rnd(), rnd(), r8, a, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r2r3r9r3r9_from_m3r2r3r9r3r9r3_and_m3r2r3r9r3r9r9 init INIT {
			composite state INIT init S1 {
				property r3 : Integer
				property r9 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r2r3r9r3r9r3
					action do
						r3 = ev.r3
					end
					transition -> S3
					event ev : app?m3r2r3r9r3r9r9
					action do
						r9 = ev.r9
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r2r3r9r3r9r9
					action do
						r9 = ev.r9
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r2r3r9r3r9r3
					action do
						r3 = ev.r3
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r2r3r9r3r9(rnd(), r3, rnd(), rnd(), r9, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
