datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m1(r9 : Byte, r5 : Byte, e : Integer, d : Byte, r111 : Byte, b : Byte@upsize "not", r0 : Byte, a : Byte@upsize "not", r78 : Byte, r8 : Byte, r12 : Byte, r45 : Byte, c : Byte)
	@code "0xE1"
	message m3(r2 : Integer, r10 : Byte, r112 : Byte, a : Integer, r6 : Byte, r79 : Byte, r4 : Integer, r46 : Byte, r13 : Byte)
	@code "0xE2"
	message m2(a : Byte@upsize "not", r80 : Byte, b : Byte@upsize "not", r3 : Integer, r113 : Byte, r1 : Integer, r11 : Integer, c : Byte, r7 : Integer, r47 : Byte, r14 : Byte)
	@code "0xE3"
	message m3r6r2(r15 : Byte, r114 : Byte, r2 : Integer, r81 : Byte, r6 : Byte, r48 : Byte)
	@code "0xE4"
	message m3r10ar4(r10 : Byte, r4 : Integer, r49 : Byte, r115 : Byte, a : Integer, r82 : Byte, r16 : Byte)
	@code "0xE5"
	message m1dr9r8bar0c(r50 : Byte, r116 : Byte, a : Byte @upsize "not", r0 : Byte, c : Byte, b : Byte @upsize "not", r17 : Byte, r9 : Byte, d : Byte, r8 : Byte, r83 : Byte)
	@code "0xE6"
	message m1er5(r5 : Byte, r117 : Byte, r18 : Byte, e : Integer, r84 : Byte, r51 : Byte)
	@code "0xE7"
	message m2a(r118 : Byte, r19 : Byte, a : Byte @upsize "not", r52 : Byte, r85 : Byte)
	@code "0xE8"
	message m2r3cr11br1r7(r1 : Integer, b : Byte @upsize "not", r7 : Integer, r53 : Byte, r119 : Byte, r20 : Byte, r11 : Integer, r3 : Integer, r86 : Byte, c : Byte)
	@code "0xE9"
	message m3r6r2r6(r87 : Byte, r6 : Byte, r21 : Byte, r54 : Byte, r120 : Byte)
	@code "0xEA"
	message m3r6r2r2(r121 : Byte, r88 : Byte, r22 : Byte, r2 : Integer, r55 : Byte)
	@code "0xEB"
	message m1dr9r8bar0cdr9r8(r89 : Byte, r23 : Byte, d : Byte, r8 : Byte, r122 : Byte, r56 : Byte, r9 : Byte)
	@code "0xEC"
	message m1dr9r8bar0cbar0c(r57 : Byte, r24 : Byte, c : Byte, r90 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", r123 : Byte, r0 : Byte)
	@code "0xED"
	message m1er5e(e : Integer, r91 : Byte, r58 : Byte, r124 : Byte, r25 : Byte)
	@code "0xEE"
	message m1er5r5(r5 : Byte, r125 : Byte, r59 : Byte, r92 : Byte, r26 : Byte)
	@code "0xEF"
	message m2r3cr11br1r7r3c(c : Byte, r93 : Byte, r126 : Byte, r3 : Integer, r60 : Byte, r27 : Byte)
	@code "0xF0"
	message m2r3cr11br1r7r11br1r7(r61 : Byte, r7 : Integer, r28 : Byte, r127 : Byte, r1 : Integer, b : Byte @upsize "not", r94 : Byte, r11 : Integer)
	@code "0xF1"
	message m3r10ar4r10(r29 : Byte, r128 : Byte, r10 : Byte, r95 : Byte, r62 : Byte)
	@code "0xF2"
	message m3r10ar4ar4(r96 : Byte, r4 : Integer, r129 : Byte, a : Integer, r30 : Byte, r63 : Byte)
	@code "0xF3"
	message m1dr9r8bar0cdr9r8d(r64 : Byte, r31 : Byte, d : Byte, r97 : Byte, r130 : Byte)
	@code "0xF4"
	message m1dr9r8bar0cdr9r8r9r8(r65 : Byte, r98 : Byte, r131 : Byte, r32 : Byte, r9 : Byte, r8 : Byte)
	@code "0xF5"
	message m2r3cr11br1r7r3cr3(r132 : Byte, r66 : Byte, r3 : Integer, r33 : Byte, r99 : Byte)
	@code "0xF6"
	message m2r3cr11br1r7r3cc(c : Byte, r133 : Byte, r100 : Byte, r67 : Byte, r34 : Byte)
	@code "0xF7"
	message m2r3cr11br1r7r11br1r7r11b(r134 : Byte, r101 : Byte, r68 : Byte, r11 : Integer, r35 : Byte, b : Byte @upsize "not")
	@code "0xF8"
	message m2r3cr11br1r7r11br1r7r1r7(r1 : Integer, r69 : Byte, r36 : Byte, r102 : Byte, r135 : Byte, r7 : Integer)
	@code "0xF9"
	message m3r10ar4ar4a(r37 : Byte, r103 : Byte, a : Integer, r70 : Byte, r136 : Byte)
	@code "0xFA"
	message m3r10ar4ar4r4(r4 : Integer, r137 : Byte, r104 : Byte, r38 : Byte, r71 : Byte)
	@code "0xFB"
	message m1dr9r8bar0cbar0cbar0(r105 : Byte, r39 : Byte, r138 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", r72 : Byte, r0 : Byte)
	@code "0xFC"
	message m1dr9r8bar0cbar0cc(r106 : Byte, c : Byte, r40 : Byte, r139 : Byte, r73 : Byte)
	@code "0xFD"
	message m1dr9r8bar0cdr9r8r9r8r9(r74 : Byte, r41 : Byte, r107 : Byte, r9 : Byte, r140 : Byte)
	@code "0xFE"
	message m1dr9r8bar0cdr9r8r9r8r8(r141 : Byte, r108 : Byte, r42 : Byte, r8 : Byte, r75 : Byte)
	@code "0xFF"
	message m2r3cr11br1r7r11br1r7r1r7r1(r76 : Byte, r1 : Integer, r43 : Byte, r142 : Byte, r109 : Byte)
	@code "0x00"
	message m2r3cr11br1r7r11br1r7r1r7r7(r7 : Integer, r110 : Byte, r77 : Byte, r143 : Byte, r44 : Byte)
	@code "0x01"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3r6r2r6
	sends m3r6r2r2 sends m3r10ar4r10 sends m3r10ar4ar4a sends m3r10ar4ar4r4 receives m2a receives m1er5e
		receives m1er5r5 receives m1dr9r8bar0cdr9r8d receives m2r3cr11br1r7r3cr3 receives m2r3cr11br1r7r3cc receives m2r3cr11br1r7r11br1r7r11b receives m1dr9r8bar0cbar0cbar0 receives m1dr9r8bar0cbar0cc receives m1dr9r8bar0cdr9r8r9r8r9 receives m1dr9r8bar0cdr9r8r9r8r8 receives m2r3cr11br1r7r11br1r7r1r7r1 receives m2r3cr11br1r7r11br1r7r1r7r7
	}
	internal port diversified {
		sends m1 sends m2a sends m2 sends m1dr9r8bar0c sends m1er5e sends m1er5r5 sends m1er5 sends m2r3cr11br1r7 sends m1dr9r8bar0cdr9r8d sends m1dr9r8bar0cdr9r8 sends m2r3cr11br1r7r3cr3 sends m2r3cr11br1r7r3cc sends m2r3cr11br1r7r3c sends m2r3cr11br1r7r11br1r7r11b sends m2r3cr11br1r7r11br1r7 sends m1dr9r8bar0cbar0cbar0 sends m1dr9r8bar0cbar0cc sends m1dr9r8bar0cbar0c sends m1dr9r8bar0cdr9r8r9r8r9 sends m1dr9r8bar0cdr9r8r9r8r8 sends m1dr9r8bar0cdr9r8r9r8 sends m2r3cr11br1r7r11br1r7r1r7r1 sends m2r3cr11br1r7r11br1r7r1r7r7 sends m2r3cr11br1r7r11br1r7r1r7 receives m1 receives m2a receives m2 receives m1dr9r8bar0c receives m1er5e receives m1er5r5 receives m1er5 receives m2r3cr11br1r7 receives m1dr9r8bar0cdr9r8d receives m1dr9r8bar0cdr9r8 receives m2r3cr11br1r7r3cr3 receives m2r3cr11br1r7r3cc receives m2r3cr11br1r7r3c receives m2r3cr11br1r7r11br1r7r11b receives m2r3cr11br1r7r11br1r7 receives m1dr9r8bar0cbar0cbar0 receives m1dr9r8bar0cbar0cc receives m1dr9r8bar0cbar0c receives m1dr9r8bar0cdr9r8r9r8r9 receives m1dr9r8bar0cdr9r8r9r8r8 receives m1dr9r8bar0cdr9r8r9r8 receives m2r3cr11br1r7r11br1r7r1r7r1 receives m2r3cr11br1r7r11br1r7r1r7r7 receives m2r3cr11br1r7r11br1r7r1r7
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						do
							println "-22" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r6r2r6(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							println "-21" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r6r2r2(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
					do
						do
							println "-14" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r10ar4r10(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "-6" , ", " , rnd(), ", " , rnd(), ", " , id , ", " , rnd(), ", " , rnd(), ", "
								app!m3r10ar4ar4a(rnd(), rnd(), id, rnd(), rnd())
							end
							do
								println "-5" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r10ar4ar4r4(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1dr9r8bar0c_and_m1er5 init INIT {
			composite state INIT init S1 {
				property d : Byte
				property r9 : Byte
				property r8 : Byte
				property b : Byte
				property a : Byte
				property r0 : Byte
				property c : Byte
				property e : Integer
				property r5 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1dr9r8bar0c
					action do
						d = ev.d
						r9 = ev.r9
						r8 = ev.r8
						b = ev.b
						a = ev.a
						r0 = ev.r0
						c = ev.c
					end
					transition -> S3
					event ev : diversified?m1er5
					action do
						e = ev.e
						r5 = ev.r5
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1er5
					action do
						e = ev.e
						r5 = ev.r5
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1dr9r8bar0c
					action do
						d = ev.d
						r9 = ev.r9
						r8 = ev.r8
						b = ev.b
						a = ev.a
						r0 = ev.r0
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(r9, r5, e, d, rnd(), b, r0, a, rnd(), r8, rnd(), rnd(), c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2a_and_m2r3cr11br1r7 init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r3 : Integer
				property c : Byte
				property r11 : Integer
				property b : Byte
				property r1 : Integer
				property r7 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : diversified?m2r3cr11br1r7
					action do
						r3 = ev.r3
						c = ev.c
						r11 = ev.r11
						b = ev.b
						r1 = ev.r1
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r3cr11br1r7
					action do
						r3 = ev.r3
						c = ev.c
						r11 = ev.r11
						b = ev.b
						r1 = ev.r1
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(a, rnd(), b, r3, rnd(), r1, r11, c, r7, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1dr9r8bar0c_from_m1dr9r8bar0cdr9r8_and_m1dr9r8bar0cbar0c init INIT {
			composite state INIT init S1 {
				property d : Byte
				property r9 : Byte
				property r8 : Byte
				property b : Byte
				property a : Byte
				property r0 : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1dr9r8bar0cdr9r8
					action do
						d = ev.d
						r9 = ev.r9
						r8 = ev.r8
					end
					transition -> S3
					event ev : diversified?m1dr9r8bar0cbar0c
					action do
						b = ev.b
						a = ev.a
						r0 = ev.r0
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1dr9r8bar0cbar0c
					action do
						b = ev.b
						a = ev.a
						r0 = ev.r0
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1dr9r8bar0cdr9r8
					action do
						d = ev.d
						r9 = ev.r9
						r8 = ev.r8
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1dr9r8bar0c(rnd(), rnd(), a, r0, c, b, rnd(), r9, d, r8, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1er5_from_m1er5e_and_m1er5r5 init INIT {
			composite state INIT init S1 {
				property e : Integer
				property r5 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1er5e
					action do
						e = ev.e
					end
					transition -> S3
					event ev : app?m1er5r5
					action do
						r5 = ev.r5
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1er5r5
					action do
						r5 = ev.r5
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1er5e
					action do
						e = ev.e
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1er5(r5, rnd(), rnd(), e, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2r3cr11br1r7_from_m2r3cr11br1r7r3c_and_m2r3cr11br1r7r11br1r7 init INIT {
			composite state INIT init S1 {
				property r3 : Integer
				property c : Byte
				property r11 : Integer
				property b : Byte
				property r1 : Integer
				property r7 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2r3cr11br1r7r3c
					action do
						r3 = ev.r3
						c = ev.c
					end
					transition -> S3
					event ev : diversified?m2r3cr11br1r7r11br1r7
					action do
						r11 = ev.r11
						b = ev.b
						r1 = ev.r1
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r3cr11br1r7r11br1r7
					action do
						r11 = ev.r11
						b = ev.b
						r1 = ev.r1
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r3cr11br1r7r3c
					action do
						r3 = ev.r3
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r3cr11br1r7(r1, b, r7, rnd(), rnd(), rnd(), r11, r3, rnd(), c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1dr9r8bar0cdr9r8_from_m1dr9r8bar0cdr9r8d_and_m1dr9r8bar0cdr9r8r9r8 init INIT {
			composite state INIT init S1 {
				property d : Byte
				property r9 : Byte
				property r8 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1dr9r8bar0cdr9r8d
					action do
						d = ev.d
					end
					transition -> S3
					event ev : diversified?m1dr9r8bar0cdr9r8r9r8
					action do
						r9 = ev.r9
						r8 = ev.r8
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1dr9r8bar0cdr9r8r9r8
					action do
						r9 = ev.r9
						r8 = ev.r8
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1dr9r8bar0cdr9r8d
					action do
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1dr9r8bar0cdr9r8(rnd(), rnd(), d, r8, rnd(), rnd(), r9)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r3cr11br1r7r3c_from_m2r3cr11br1r7r3cr3_and_m2r3cr11br1r7r3cc init INIT {
			composite state INIT init S1 {
				property r3 : Integer
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r3cr11br1r7r3cr3
					action do
						r3 = ev.r3
					end
					transition -> S3
					event ev : app?m2r3cr11br1r7r3cc
					action do
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r3cr11br1r7r3cc
					action do
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r3cr11br1r7r3cr3
					action do
						r3 = ev.r3
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r3cr11br1r7r3c(c, rnd(), rnd(), r3, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2r3cr11br1r7r11br1r7_from_m2r3cr11br1r7r11br1r7r11b_and_m2r3cr11br1r7r11br1r7r1r7 init INIT {
			composite state INIT init S1 {
				property r11 : Integer
				property b : Byte
				property r1 : Integer
				property r7 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r3cr11br1r7r11br1r7r11b
					action do
						r11 = ev.r11
						b = ev.b
					end
					transition -> S3
					event ev : diversified?m2r3cr11br1r7r11br1r7r1r7
					action do
						r1 = ev.r1
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r3cr11br1r7r11br1r7r1r7
					action do
						r1 = ev.r1
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r3cr11br1r7r11br1r7r11b
					action do
						r11 = ev.r11
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r3cr11br1r7r11br1r7(rnd(), r7, rnd(), rnd(), r1, b, rnd(), r11)
					end
					transition -> S1
				}
			}
		}
		region generate_m1dr9r8bar0cbar0c_from_m1dr9r8bar0cbar0cbar0_and_m1dr9r8bar0cbar0cc init INIT {
			composite state INIT init S1 {
				property b : Byte
				property a : Byte
				property r0 : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1dr9r8bar0cbar0cbar0
					action do
						b = ev.b
						a = ev.a
						r0 = ev.r0
					end
					transition -> S3
					event ev : app?m1dr9r8bar0cbar0cc
					action do
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1dr9r8bar0cbar0cc
					action do
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1dr9r8bar0cbar0cbar0
					action do
						b = ev.b
						a = ev.a
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1dr9r8bar0cbar0c(rnd(), rnd(), c, rnd(), a, b, rnd(), r0)
					end
					transition -> S1
				}
			}
		}
		region generate_m1dr9r8bar0cdr9r8r9r8_from_m1dr9r8bar0cdr9r8r9r8r9_and_m1dr9r8bar0cdr9r8r9r8r8 init INIT {
			composite state INIT init S1 {
				property r9 : Byte
				property r8 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1dr9r8bar0cdr9r8r9r8r9
					action do
						r9 = ev.r9
					end
					transition -> S3
					event ev : app?m1dr9r8bar0cdr9r8r9r8r8
					action do
						r8 = ev.r8
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1dr9r8bar0cdr9r8r9r8r8
					action do
						r8 = ev.r8
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1dr9r8bar0cdr9r8r9r8r9
					action do
						r9 = ev.r9
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1dr9r8bar0cdr9r8r9r8(rnd(), rnd(), rnd(), rnd(), r9, r8)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r3cr11br1r7r11br1r7r1r7_from_m2r3cr11br1r7r11br1r7r1r7r1_and_m2r3cr11br1r7r11br1r7r1r7r7 init INIT {
			composite state INIT init S1 {
				property r1 : Integer
				property r7 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r3cr11br1r7r11br1r7r1r7r1
					action do
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m2r3cr11br1r7r11br1r7r1r7r7
					action do
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r3cr11br1r7r11br1r7r1r7r7
					action do
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r3cr11br1r7r11br1r7r1r7r1
					action do
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r3cr11br1r7r11br1r7r1r7(r1, rnd(), rnd(), rnd(), rnd(), r7)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m2a sends m1er5e
		sends m1er5r5 sends m1dr9r8bar0cdr9r8d sends m2r3cr11br1r7r3cr3 sends m2r3cr11br1r7r3cc sends m2r3cr11br1r7r11br1r7r11b sends m1dr9r8bar0cbar0cbar0 sends m1dr9r8bar0cbar0cc sends m1dr9r8bar0cdr9r8r9r8r9 sends m1dr9r8bar0cdr9r8r9r8r8 sends m2r3cr11br1r7r11br1r7r1r7r1 sends m2r3cr11br1r7r11br1r7r1r7r7 receives m3r6r2r6
	receives m3r6r2r2 receives m3r10ar4r10 receives m3r10ar4ar4a receives m3r10ar4ar4r4
	}
	internal port diversified {
		sends m3 sends m3r6r2r6 sends m3r6r2r2 sends m3r6r2 sends m3r10ar4r10 sends m3r10ar4 sends m3r10ar4ar4a sends m3r10ar4ar4r4 sends m3r10ar4ar4 receives m3 receives m3r6r2r6 receives m3r6r2r2 receives m3r6r2 receives m3r10ar4r10 receives m3r10ar4 receives m3r10ar4ar4a receives m3r10ar4ar4r4 receives m3r10ar4ar4
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						do
							do
								println "-12" , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , rnd(), ", " , rnd(), ", "
								app!m1dr9r8bar0cdr9r8d(rnd(), rnd(), _d, rnd(), rnd())
							end
							do
								do
									println "-2" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m1dr9r8bar0cdr9r8r9r8r9(rnd(), rnd(), rnd(), rnd(), rnd())
								end
								do
									println "-1" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m1dr9r8bar0cdr9r8r9r8r8(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
						end
						do
							do
								println "-4" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", " , _b , ", " , rnd(), ", " , rnd(), ", "
								app!m1dr9r8bar0cbar0cbar0(rnd(), rnd(), rnd(), _a, _b, rnd(), rnd())
							end
							do
								println "-3" , ", " , rnd(), ", " , _c , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1dr9r8bar0cbar0cc(rnd(), _c, rnd(), rnd(), rnd())
							end
						end
					end
					do
						do
							println "-18" , ", " , _e , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1er5e(_e, rnd(), rnd(), rnd(), rnd())
						end
						do
							println "-17" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1er5r5(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						println "-24" , ", " , rnd(), ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", "
						app!m2a(rnd(), rnd(), _a, rnd(), rnd())
					end
					do
						do
							do
								println "-10" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m2r3cr11br1r7r3cr3(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "-9" , ", " , _c , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m2r3cr11br1r7r3cc(_c, rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							do
								println "-8" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", "
								app!m2r3cr11br1r7r11br1r7r11b(rnd(), rnd(), rnd(), rnd(), rnd(), _b)
							end
							do
								do
									println "0" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m2r3cr11br1r7r11br1r7r1r7r1(rnd(), rnd(), rnd(), rnd(), rnd())
								end
								do
									println "1" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m2r3cr11br1r7r11br1r7r1r7r7(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r6r2_and_m3r10ar4 init INIT {
			composite state INIT init S1 {
				property r6 : Byte
				property r2 : Integer
				property r10 : Byte
				property a : Integer
				property r4 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3r6r2
					action do
						r6 = ev.r6
						r2 = ev.r2
					end
					transition -> S3
					event ev : diversified?m3r10ar4
					action do
						r10 = ev.r10
						a = ev.a
						r4 = ev.r4
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r10ar4
					action do
						r10 = ev.r10
						a = ev.a
						r4 = ev.r4
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r6r2
					action do
						r6 = ev.r6
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r2, r10, rnd(), a, r6, rnd(), r4, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r6r2_from_m3r6r2r6_and_m3r6r2r2 init INIT {
			composite state INIT init S1 {
				property r6 : Byte
				property r2 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r6r2r6
					action do
						r6 = ev.r6
					end
					transition -> S3
					event ev : app?m3r6r2r2
					action do
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r6r2r2
					action do
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r6r2r6
					action do
						r6 = ev.r6
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r6r2(rnd(), rnd(), r2, rnd(), r6, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r10ar4_from_m3r10ar4r10_and_m3r10ar4ar4 init INIT {
			composite state INIT init S1 {
				property r10 : Byte
				property a : Integer
				property r4 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r10ar4r10
					action do
						r10 = ev.r10
					end
					transition -> S3
					event ev : diversified?m3r10ar4ar4
					action do
						a = ev.a
						r4 = ev.r4
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r10ar4ar4
					action do
						a = ev.a
						r4 = ev.r4
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r10ar4r10
					action do
						r10 = ev.r10
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r10ar4(r10, r4, rnd(), rnd(), a, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r10ar4ar4_from_m3r10ar4ar4a_and_m3r10ar4ar4r4 init INIT {
			composite state INIT init S1 {
				property a : Integer
				property r4 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r10ar4ar4a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m3r10ar4ar4r4
					action do
						r4 = ev.r4
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r10ar4ar4r4
					action do
						r4 = ev.r4
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r10ar4ar4a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r10ar4ar4(rnd(), r4, rnd(), a, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
