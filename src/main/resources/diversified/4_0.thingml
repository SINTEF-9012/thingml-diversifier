datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m3(r3 : Integer, r66 : Byte, r12 : Byte, r0 : Integer, a : Integer, r9 : Byte, r93 : Byte, r39 : Byte, r8 : Byte)
	@code "0xB0"
	message m1(b : Byte@upsize "not", r40 : Byte, a : Byte@upsize "not", e : Byte, r4 : Integer, r13 : Byte, c : Byte, r2 : Integer, r10 : Integer, r7 : Integer, d : Byte, r67 : Byte, r94 : Byte)
	@code "0xB1"
	message m2(r5 : Byte, r1 : Byte, r41 : Byte, r95 : Byte, r14 : Byte, c : Integer, a : Byte@upsize "not", b : Byte@upsize "not", r11 : Byte, r68 : Byte, r6 : Integer)
	@code "0xB2"
	message m3ar8(r96 : Byte, r8 : Byte, r15 : Byte, a : Integer, r42 : Byte, r69 : Byte)
	@code "0xB3"
	message m3r0r9r3(r16 : Byte, r97 : Byte, r9 : Byte, r0 : Integer, r43 : Byte, r70 : Byte, r3 : Integer)
	@code "0xB4"
	message m1ear7r10r2cr4(r44 : Byte, r4 : Integer, r2 : Integer, r71 : Byte, r10 : Integer, r17 : Byte, e : Byte, a : Byte @upsize "not", r7 : Integer, c : Byte, r98 : Byte)
	@code "0xB5"
	message m1db(b : Byte @upsize "not", r45 : Byte, d : Byte, r18 : Byte, r72 : Byte, r99 : Byte)
	@code "0xB6"
	message m2r11r6r5(r100 : Byte, r73 : Byte, r5 : Byte, r19 : Byte, r11 : Byte, r46 : Byte, r6 : Integer)
	@code "0xB7"
	message m2r1bca(r101 : Byte, a : Byte @upsize "not", c : Integer, r74 : Byte, r47 : Byte, r1 : Byte, r20 : Byte, b : Byte @upsize "not")
	@code "0xB8"
	message m3ar8a(r48 : Byte, a : Integer, r21 : Byte, r102 : Byte, r75 : Byte)
	@code "0xB9"
	message m3ar8r8(r103 : Byte, r76 : Byte, r22 : Byte, r8 : Byte, r49 : Byte)
	@code "0xBA"
	message m3r0r9r3r0(r50 : Byte, r0 : Integer, r77 : Byte, r104 : Byte, r23 : Byte)
	@code "0xBB"
	message m3r0r9r3r9r3(r51 : Byte, r3 : Integer, r24 : Byte, r9 : Byte, r78 : Byte, r105 : Byte)
	@code "0xBC"
	message m1ear7r10r2cr4ear7(e : Byte, r25 : Byte, a : Byte @upsize "not", r106 : Byte, r52 : Byte, r79 : Byte, r7 : Integer)
	@code "0xBD"
	message m1ear7r10r2cr4r10r2cr4(c : Byte, r4 : Integer, r53 : Byte, r80 : Byte, r107 : Byte, r26 : Byte, r10 : Integer, r2 : Integer)
	@code "0xBE"
	message m2r11r6r5r11r6(r108 : Byte, r6 : Integer, r54 : Byte, r81 : Byte, r27 : Byte, r11 : Byte)
	@code "0xBF"
	message m2r11r6r5r5(r5 : Byte, r82 : Byte, r28 : Byte, r55 : Byte, r109 : Byte)
	@code "0xC0"
	message m1dbd(r56 : Byte, r110 : Byte, r29 : Byte, d : Byte, r83 : Byte)
	@code "0xC1"
	message m1dbb(r84 : Byte, r57 : Byte, b : Byte @upsize "not", r111 : Byte, r30 : Byte)
	@code "0xC2"
	message m2r1bcar1(r1 : Byte, r112 : Byte, r58 : Byte, r85 : Byte, r31 : Byte)
	@code "0xC3"
	message m2r1bcabca(c : Integer, r59 : Byte, r86 : Byte, r32 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", r113 : Byte)
	@code "0xC4"
	message m1ear7r10r2cr4r10r2cr4r10(r114 : Byte, r87 : Byte, r10 : Integer, r33 : Byte, r60 : Byte)
	@code "0xC5"
	message m1ear7r10r2cr4r10r2cr4r2cr4(r61 : Byte, r4 : Integer, r115 : Byte, r2 : Integer, r34 : Byte, r88 : Byte, c : Byte)
	@code "0xC6"
	message m3r0r9r3r9r3r9(r116 : Byte, r62 : Byte, r35 : Byte, r9 : Byte, r89 : Byte)
	@code "0xC7"
	message m3r0r9r3r9r3r3(r3 : Integer, r90 : Byte, r117 : Byte, r63 : Byte, r36 : Byte)
	@code "0xC8"
	message m2r1bcabcabc(r37 : Byte, r118 : Byte, r64 : Byte, r91 : Byte, b : Byte @upsize "not", c : Integer)
	@code "0xC9"
	message m2r1bcabcaa(r92 : Byte, r119 : Byte, r38 : Byte, a : Byte @upsize "not", r65 : Byte)
	@code "0xCA"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3ar8a
	sends m3ar8r8 sends m3r0r9r3r0 sends m3r0r9r3r9r3r9 sends m3r0r9r3r9r3r3 receives m1ear7r10r2cr4ear7 receives m2r11r6r5r11r6
		receives m2r11r6r5r5 receives m1dbd receives m1dbb receives m2r1bcar1 receives m1ear7r10r2cr4r10r2cr4r10 receives m1ear7r10r2cr4r10r2cr4r2cr4 receives m2r1bcabcabc receives m2r1bcabcaa
	}
	internal port diversified {
		sends m1 sends m2 sends m1ear7r10r2cr4ear7 sends m1ear7r10r2cr4 sends m2r11r6r5r11r6 sends m2r11r6r5r5 sends m2r11r6r5 sends m1dbd sends m1dbb sends m1db sends m2r1bcar1 sends m2r1bca sends m1ear7r10r2cr4r10r2cr4r10 sends m1ear7r10r2cr4r10r2cr4r2cr4 sends m1ear7r10r2cr4r10r2cr4 sends m2r1bcabcabc sends m2r1bcabcaa sends m2r1bcabca receives m1 receives m2 receives m1ear7r10r2cr4ear7 receives m1ear7r10r2cr4 receives m2r11r6r5r11r6 receives m2r11r6r5r5 receives m2r11r6r5 receives m1dbd receives m1dbb receives m1db receives m2r1bcar1 receives m2r1bca receives m1ear7r10r2cr4r10r2cr4r10 receives m1ear7r10r2cr4r10r2cr4r2cr4 receives m1ear7r10r2cr4r10r2cr4 receives m2r1bcabcabc receives m2r1bcabcaa receives m2r1bcabca
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						do
							println "-71" , ", " , rnd(), ", " , id , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3ar8a(rnd(), id, rnd(), rnd(), rnd())
						end
						do
							println "-70" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3ar8r8(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
					do
						do
							println "-69" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r0r9r3r0(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "-57" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r0r9r3r9r3r9(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "-56" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r0r9r3r9r3r3(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1ear7r10r2cr4_and_m1db init INIT {
			composite state INIT init S1 {
				property e : Byte
				property a : Byte
				property r7 : Integer
				property r10 : Integer
				property r2 : Integer
				property c : Byte
				property r4 : Integer
				property d : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1ear7r10r2cr4
					action do
						e = ev.e
						a = ev.a
						r7 = ev.r7
						r10 = ev.r10
						r2 = ev.r2
						c = ev.c
						r4 = ev.r4
					end
					transition -> S3
					event ev : diversified?m1db
					action do
						d = ev.d
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1db
					action do
						d = ev.d
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ear7r10r2cr4
					action do
						e = ev.e
						a = ev.a
						r7 = ev.r7
						r10 = ev.r10
						r2 = ev.r2
						c = ev.c
						r4 = ev.r4
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(b, rnd(), a, e, r4, rnd(), c, r2, r10, r7, d, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2r11r6r5_and_m2r1bca init INIT {
			composite state INIT init S1 {
				property r11 : Byte
				property r6 : Integer
				property r5 : Byte
				property r1 : Byte
				property b : Byte
				property c : Integer
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2r11r6r5
					action do
						r11 = ev.r11
						r6 = ev.r6
						r5 = ev.r5
					end
					transition -> S3
					event ev : diversified?m2r1bca
					action do
						r1 = ev.r1
						b = ev.b
						c = ev.c
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r1bca
					action do
						r1 = ev.r1
						b = ev.b
						c = ev.c
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r11r6r5
					action do
						r11 = ev.r11
						r6 = ev.r6
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r5, r1, rnd(), rnd(), rnd(), c, a, b, r11, rnd(), r6)
					end
					transition -> S1
				}
			}
		}
		region generate_m1ear7r10r2cr4_from_m1ear7r10r2cr4ear7_and_m1ear7r10r2cr4r10r2cr4 init INIT {
			composite state INIT init S1 {
				property e : Byte
				property a : Byte
				property r7 : Integer
				property r10 : Integer
				property r2 : Integer
				property c : Byte
				property r4 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1ear7r10r2cr4ear7
					action do
						e = ev.e
						a = ev.a
						r7 = ev.r7
					end
					transition -> S3
					event ev : diversified?m1ear7r10r2cr4r10r2cr4
					action do
						r10 = ev.r10
						r2 = ev.r2
						c = ev.c
						r4 = ev.r4
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ear7r10r2cr4r10r2cr4
					action do
						r10 = ev.r10
						r2 = ev.r2
						c = ev.c
						r4 = ev.r4
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1ear7r10r2cr4ear7
					action do
						e = ev.e
						a = ev.a
						r7 = ev.r7
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ear7r10r2cr4(rnd(), r4, r2, rnd(), r10, rnd(), e, a, r7, c, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2r11r6r5_from_m2r11r6r5r11r6_and_m2r11r6r5r5 init INIT {
			composite state INIT init S1 {
				property r11 : Byte
				property r6 : Integer
				property r5 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r11r6r5r11r6
					action do
						r11 = ev.r11
						r6 = ev.r6
					end
					transition -> S3
					event ev : app?m2r11r6r5r5
					action do
						r5 = ev.r5
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r11r6r5r5
					action do
						r5 = ev.r5
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r11r6r5r11r6
					action do
						r11 = ev.r11
						r6 = ev.r6
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r11r6r5(rnd(), rnd(), r5, rnd(), r11, rnd(), r6)
					end
					transition -> S1
				}
			}
		}
		region generate_m1db_from_m1dbd_and_m1dbb init INIT {
			composite state INIT init S1 {
				property d : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1dbd
					action do
						d = ev.d
					end
					transition -> S3
					event ev : app?m1dbb
					action do
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1dbb
					action do
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1dbd
					action do
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1db(b, rnd(), d, rnd(), rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2r1bca_from_m2r1bcar1_and_m2r1bcabca init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property b : Byte
				property c : Integer
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r1bcar1
					action do
						r1 = ev.r1
					end
					transition -> S3
					event ev : diversified?m2r1bcabca
					action do
						b = ev.b
						c = ev.c
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r1bcabca
					action do
						b = ev.b
						c = ev.c
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r1bcar1
					action do
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r1bca(rnd(), a, c, rnd(), rnd(), r1, rnd(), b)
					end
					transition -> S1
				}
			}
		}
		region generate_m1ear7r10r2cr4r10r2cr4_from_m1ear7r10r2cr4r10r2cr4r10_and_m1ear7r10r2cr4r10r2cr4r2cr4 init INIT {
			composite state INIT init S1 {
				property r10 : Integer
				property r2 : Integer
				property c : Byte
				property r4 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1ear7r10r2cr4r10r2cr4r10
					action do
						r10 = ev.r10
					end
					transition -> S3
					event ev : app?m1ear7r10r2cr4r10r2cr4r2cr4
					action do
						r2 = ev.r2
						c = ev.c
						r4 = ev.r4
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1ear7r10r2cr4r10r2cr4r2cr4
					action do
						r2 = ev.r2
						c = ev.c
						r4 = ev.r4
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1ear7r10r2cr4r10r2cr4r10
					action do
						r10 = ev.r10
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ear7r10r2cr4r10r2cr4(c, r4, rnd(), rnd(), rnd(), rnd(), r10, r2)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r1bcabca_from_m2r1bcabcabc_and_m2r1bcabcaa init INIT {
			composite state INIT init S1 {
				property b : Byte
				property c : Integer
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r1bcabcabc
					action do
						b = ev.b
						c = ev.c
					end
					transition -> S3
					event ev : app?m2r1bcabcaa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r1bcabcaa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r1bcabcabc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r1bcabca(c, rnd(), rnd(), rnd(), a, b, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1ear7r10r2cr4ear7 sends m2r11r6r5r11r6
		sends m2r11r6r5r5 sends m1dbd sends m1dbb sends m2r1bcar1 sends m1ear7r10r2cr4r10r2cr4r10 sends m1ear7r10r2cr4r10r2cr4r2cr4 sends m2r1bcabcabc sends m2r1bcabcaa receives m3ar8a
	receives m3ar8r8 receives m3r0r9r3r0 receives m3r0r9r3r9r3r9 receives m3r0r9r3r9r3r3
	}
	internal port diversified {
		sends m3 sends m3ar8a sends m3ar8r8 sends m3ar8 sends m3r0r9r3r0 sends m3r0r9r3 sends m3r0r9r3r9r3r9 sends m3r0r9r3r9r3r3 sends m3r0r9r3r9r3 receives m3 receives m3ar8a receives m3ar8r8 receives m3ar8 receives m3r0r9r3r0 receives m3r0r9r3 receives m3r0r9r3r9r3r9 receives m3r0r9r3r9r3r3 receives m3r0r9r3r9r3
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						do
							println "-67" , ", " , _e , ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1ear7r10r2cr4ear7(_e, rnd(), _a, rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "-59" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1ear7r10r2cr4r10r2cr4r10(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "-58" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", "
								app!m1ear7r10r2cr4r10r2cr4r2cr4(rnd(), rnd(), rnd(), rnd(), rnd(), rnd(), _c)
							end
						end
					end
					do
						do
							println "-63" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _d , ", " , rnd(), ", "
							app!m1dbd(rnd(), rnd(), rnd(), _d, rnd())
						end
						do
							println "-62" , ", " , rnd(), ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", "
							app!m1dbb(rnd(), rnd(), _b, rnd(), rnd())
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						do
							println "-65" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r11r6r5r11r6(rnd(), rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							println "-64" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r11r6r5r5(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
					do
						do
							println "-61" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r1bcar1(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "-55" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _c , ", "
								app!m2r1bcabcabc(rnd(), rnd(), rnd(), rnd(), _b, _c)
							end
							do
								println "-54" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", " , rnd(), ", "
								app!m2r1bcabcaa(rnd(), rnd(), rnd(), _a, rnd())
							end
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3ar8_and_m3r0r9r3 init INIT {
			composite state INIT init S1 {
				property a : Integer
				property r8 : Byte
				property r0 : Integer
				property r9 : Byte
				property r3 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3ar8
					action do
						a = ev.a
						r8 = ev.r8
					end
					transition -> S3
					event ev : diversified?m3r0r9r3
					action do
						r0 = ev.r0
						r9 = ev.r9
						r3 = ev.r3
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r0r9r3
					action do
						r0 = ev.r0
						r9 = ev.r9
						r3 = ev.r3
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3ar8
					action do
						a = ev.a
						r8 = ev.r8
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r3, rnd(), rnd(), r0, a, r9, rnd(), rnd(), r8)
					end
					transition -> S1
				}
			}
		}
		region generate_m3ar8_from_m3ar8a_and_m3ar8r8 init INIT {
			composite state INIT init S1 {
				property a : Integer
				property r8 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3ar8a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m3ar8r8
					action do
						r8 = ev.r8
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3ar8r8
					action do
						r8 = ev.r8
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3ar8a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3ar8(rnd(), r8, rnd(), a, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r0r9r3_from_m3r0r9r3r0_and_m3r0r9r3r9r3 init INIT {
			composite state INIT init S1 {
				property r0 : Integer
				property r9 : Byte
				property r3 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r0r9r3r0
					action do
						r0 = ev.r0
					end
					transition -> S3
					event ev : diversified?m3r0r9r3r9r3
					action do
						r9 = ev.r9
						r3 = ev.r3
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r0r9r3r9r3
					action do
						r9 = ev.r9
						r3 = ev.r3
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r0r9r3r0
					action do
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r0r9r3(rnd(), rnd(), r9, r0, rnd(), rnd(), r3)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r0r9r3r9r3_from_m3r0r9r3r9r3r9_and_m3r0r9r3r9r3r3 init INIT {
			composite state INIT init S1 {
				property r9 : Byte
				property r3 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r0r9r3r9r3r9
					action do
						r9 = ev.r9
					end
					transition -> S3
					event ev : app?m3r0r9r3r9r3r3
					action do
						r3 = ev.r3
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r0r9r3r9r3r3
					action do
						r3 = ev.r3
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r0r9r3r9r3r9
					action do
						r9 = ev.r9
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r0r9r3r9r3(rnd(), r3, rnd(), r9, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
