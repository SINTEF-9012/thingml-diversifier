datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m3(a : Integer, r0 : Byte, r34 : Byte, r6 : Integer, r9 : Byte, r4 : Byte, r59 : Byte)
	@code "0x59"
	message m2(r7 : Byte, c : Byte, a : Byte@upsize "not", r10 : Byte, r1 : Byte, r3 : Integer, b : Byte@upsize "not", r60 : Byte, r35 : Byte)
	@code "0x5A"
	message m1(r2 : Integer, r8 : Byte, c : Byte, e : Integer, d : Byte, r11 : Byte, r5 : Byte, b : Byte@upsize "not", r61 : Byte, r36 : Byte, a : Byte@upsize "not")
	@code "0x5B"
	message m3r6r4(r6 : Integer, r12 : Byte, r62 : Byte, r37 : Byte, r4 : Byte)
	@code "0x5C"
	message m3ar0(r38 : Byte, r0 : Byte, r63 : Byte, r13 : Byte, a : Integer)
	@code "0x5D"
	message m1dr2e(r14 : Byte, r2 : Integer, d : Byte, r64 : Byte, e : Integer, r39 : Byte)
	@code "0x5E"
	message m1r5br8ac(r40 : Byte, r65 : Byte, b : Byte @upsize "not", r5 : Byte, c : Byte, a : Byte @upsize "not", r8 : Byte, r15 : Byte)
	@code "0x5F"
	message m2ar1r3c(r16 : Byte, c : Byte, r1 : Byte, a : Byte @upsize "not", r3 : Integer, r41 : Byte, r66 : Byte)
	@code "0x60"
	message m2r7b(r42 : Byte, b : Byte @upsize "not", r17 : Byte, r7 : Byte, r67 : Byte)
	@code "0x61"
	message m3ar0a(r68 : Byte, r18 : Byte, r43 : Byte, a : Integer)
	@code "0x62"
	message m3ar0r0(r44 : Byte, r19 : Byte, r69 : Byte, r0 : Byte)
	@code "0x63"
	message m1dr2edr2(r2 : Integer, r20 : Byte, d : Byte, r70 : Byte, r45 : Byte)
	@code "0x64"
	message m1dr2ee(r21 : Byte, r71 : Byte, e : Integer, r46 : Byte)
	@code "0x65"
	message m1r5br8acr5(r72 : Byte, r5 : Byte, r22 : Byte, r47 : Byte)
	@code "0x66"
	message m1r5br8acbr8ac(r8 : Byte, r23 : Byte, r73 : Byte, r48 : Byte, b : Byte @upsize "not", a : Byte @upsize "not", c : Byte)
	@code "0x67"
	message m2ar1r3ca(r49 : Byte, r24 : Byte, r74 : Byte, a : Byte @upsize "not")
	@code "0x68"
	message m2ar1r3cr1r3c(r3 : Integer, c : Byte, r50 : Byte, r1 : Byte, r25 : Byte, r75 : Byte)
	@code "0x69"
	message m3r6r4r6(r26 : Byte, r6 : Integer, r51 : Byte, r76 : Byte)
	@code "0x6A"
	message m3r6r4r4(r4 : Byte, r52 : Byte, r27 : Byte, r77 : Byte)
	@code "0x6B"
	message m2r7br7(r7 : Byte, r78 : Byte, r53 : Byte, r28 : Byte)
	@code "0x6C"
	message m2r7bb(b : Byte @upsize "not", r54 : Byte, r79 : Byte, r29 : Byte)
	@code "0x6D"
	message m1dr2edr2d(r30 : Byte, r80 : Byte, d : Byte, r55 : Byte)
	@code "0x6E"
	message m1dr2edr2r2(r81 : Byte, r31 : Byte, r2 : Integer, r56 : Byte)
	@code "0x6F"
	message m2ar1r3cr1r3cr1(r57 : Byte, r1 : Byte, r82 : Byte, r32 : Byte)
	@code "0x70"
	message m2ar1r3cr1r3cr3c(r58 : Byte, r83 : Byte, r3 : Integer, r33 : Byte, c : Byte)
	@code "0x71"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3ar0a
	sends m3ar0r0 sends m3r6r4r6 sends m3r6r4r4 receives m1dr2ee receives m1r5br8acr5
		receives m1r5br8acbr8ac receives m2ar1r3ca receives m2r7br7 receives m2r7bb receives m1dr2edr2d receives m1dr2edr2r2 receives m2ar1r3cr1r3cr1 receives m2ar1r3cr1r3cr3c
	}
	internal port diversified {
		sends m1 sends m2 sends m1dr2ee sends m1dr2e sends m1r5br8acr5 sends m1r5br8acbr8ac sends m1r5br8ac sends m2ar1r3ca sends m2ar1r3c sends m2r7br7 sends m2r7bb sends m2r7b sends m1dr2edr2d sends m1dr2edr2r2 sends m1dr2edr2 sends m2ar1r3cr1r3cr1 sends m2ar1r3cr1r3cr3c sends m2ar1r3cr1r3c receives m1 receives m2 receives m1dr2ee receives m1dr2e receives m1r5br8acr5 receives m1r5br8acbr8ac receives m1r5br8ac receives m2ar1r3ca receives m2ar1r3c receives m2r7br7 receives m2r7bb receives m2r7b receives m1dr2edr2d receives m1dr2edr2r2 receives m1dr2edr2 receives m2ar1r3cr1r3cr1 receives m2ar1r3cr1r3cr3c receives m2ar1r3cr1r3c
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						do
							println "106" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r6r4r6(rnd(), rnd(), rnd(), rnd())
						end
						do
							println "107" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r6r4r4(rnd(), rnd(), rnd(), rnd())
						end
					end
					do
						do
							println "98" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
							app!m3ar0a(rnd(), rnd(), rnd(), id)
						end
						do
							println "99" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3ar0r0(rnd(), rnd(), rnd(), rnd())
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1dr2e_and_m1r5br8ac init INIT {
			composite state INIT init S1 {
				property d : Byte
				property r2 : Integer
				property e : Integer
				property r5 : Byte
				property b : Byte
				property r8 : Byte
				property a : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1dr2e
					action do
						d = ev.d
						r2 = ev.r2
						e = ev.e
					end
					transition -> S3
					event ev : diversified?m1r5br8ac
					action do
						r5 = ev.r5
						b = ev.b
						r8 = ev.r8
						a = ev.a
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1r5br8ac
					action do
						r5 = ev.r5
						b = ev.b
						r8 = ev.r8
						a = ev.a
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1dr2e
					action do
						d = ev.d
						r2 = ev.r2
						e = ev.e
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(r2, r8, c, e, d, rnd(), r5, b, rnd(), rnd(), a)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2ar1r3c_and_m2r7b init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r1 : Byte
				property r3 : Integer
				property c : Byte
				property r7 : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2ar1r3c
					action do
						a = ev.a
						r1 = ev.r1
						r3 = ev.r3
						c = ev.c
					end
					transition -> S3
					event ev : diversified?m2r7b
					action do
						r7 = ev.r7
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r7b
					action do
						r7 = ev.r7
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2ar1r3c
					action do
						a = ev.a
						r1 = ev.r1
						r3 = ev.r3
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r7, c, a, rnd(), r1, r3, b, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1dr2e_from_m1dr2edr2_and_m1dr2ee init INIT {
			composite state INIT init S1 {
				property d : Byte
				property r2 : Integer
				property e : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1dr2edr2
					action do
						d = ev.d
						r2 = ev.r2
					end
					transition -> S3
					event ev : app?m1dr2ee
					action do
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1dr2ee
					action do
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1dr2edr2
					action do
						d = ev.d
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1dr2e(rnd(), r2, d, rnd(), e, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1r5br8ac_from_m1r5br8acr5_and_m1r5br8acbr8ac init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property b : Byte
				property r8 : Byte
				property a : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1r5br8acr5
					action do
						r5 = ev.r5
					end
					transition -> S3
					event ev : app?m1r5br8acbr8ac
					action do
						b = ev.b
						r8 = ev.r8
						a = ev.a
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1r5br8acbr8ac
					action do
						b = ev.b
						r8 = ev.r8
						a = ev.a
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1r5br8acr5
					action do
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1r5br8ac(rnd(), rnd(), b, r5, c, a, r8, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2ar1r3c_from_m2ar1r3ca_and_m2ar1r3cr1r3c init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r1 : Byte
				property r3 : Integer
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2ar1r3ca
					action do
						a = ev.a
					end
					transition -> S3
					event ev : diversified?m2ar1r3cr1r3c
					action do
						r1 = ev.r1
						r3 = ev.r3
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2ar1r3cr1r3c
					action do
						r1 = ev.r1
						r3 = ev.r3
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2ar1r3ca
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2ar1r3c(rnd(), c, r1, a, r3, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2r7b_from_m2r7br7_and_m2r7bb init INIT {
			composite state INIT init S1 {
				property r7 : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r7br7
					action do
						r7 = ev.r7
					end
					transition -> S3
					event ev : app?m2r7bb
					action do
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r7bb
					action do
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r7br7
					action do
						r7 = ev.r7
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r7b(rnd(), b, rnd(), r7, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1dr2edr2_from_m1dr2edr2d_and_m1dr2edr2r2 init INIT {
			composite state INIT init S1 {
				property d : Byte
				property r2 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1dr2edr2d
					action do
						d = ev.d
					end
					transition -> S3
					event ev : app?m1dr2edr2r2
					action do
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1dr2edr2r2
					action do
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1dr2edr2d
					action do
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1dr2edr2(r2, rnd(), d, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2ar1r3cr1r3c_from_m2ar1r3cr1r3cr1_and_m2ar1r3cr1r3cr3c init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property r3 : Integer
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2ar1r3cr1r3cr1
					action do
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m2ar1r3cr1r3cr3c
					action do
						r3 = ev.r3
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2ar1r3cr1r3cr3c
					action do
						r3 = ev.r3
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2ar1r3cr1r3cr1
					action do
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2ar1r3cr1r3c(r3, c, rnd(), r1, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1dr2ee sends m1r5br8acr5
		sends m1r5br8acbr8ac sends m2ar1r3ca sends m2r7br7 sends m2r7bb sends m1dr2edr2d sends m1dr2edr2r2 sends m2ar1r3cr1r3cr1 sends m2ar1r3cr1r3cr3c receives m3ar0a
	receives m3ar0r0 receives m3r6r4r6 receives m3r6r4r4
	}
	internal port diversified {
		sends m3 sends m3ar0a sends m3ar0r0 sends m3ar0 sends m3r6r4r6 sends m3r6r4r4 sends m3r6r4 receives m3 receives m3ar0a receives m3ar0r0 receives m3ar0 receives m3r6r4r6 receives m3r6r4r4 receives m3r6r4
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						do
							do
								println "110" , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , rnd(), ", "
								app!m1dr2edr2d(rnd(), rnd(), _d, rnd())
							end
							do
								println "111" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1dr2edr2r2(rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							println "101" , ", " , rnd(), ", " , rnd(), ", " , _e , ", " , rnd(), ", "
							app!m1dr2ee(rnd(), rnd(), _e, rnd())
						end
					end
					do
						do
							println "102" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1r5br8acr5(rnd(), rnd(), rnd(), rnd())
						end
						do
							println "103" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _a , ", " , _c , ", "
							app!m1r5br8acbr8ac(rnd(), rnd(), rnd(), rnd(), _b, _a, _c)
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						do
							println "104" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", "
							app!m2ar1r3ca(rnd(), rnd(), rnd(), _a)
						end
						do
							do
								println "112" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m2ar1r3cr1r3cr1(rnd(), rnd(), rnd(), rnd())
							end
							do
								println "113" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", "
								app!m2ar1r3cr1r3cr3c(rnd(), rnd(), rnd(), rnd(), _c)
							end
						end
					end
					do
						do
							println "108" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r7br7(rnd(), rnd(), rnd(), rnd())
						end
						do
							println "109" , ", " , _b , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r7bb(_b, rnd(), rnd(), rnd())
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r6r4_and_m3ar0 init INIT {
			composite state INIT init S1 {
				property r6 : Integer
				property r4 : Byte
				property a : Integer
				property r0 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3r6r4
					action do
						r6 = ev.r6
						r4 = ev.r4
					end
					transition -> S3
					event ev : diversified?m3ar0
					action do
						a = ev.a
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3ar0
					action do
						a = ev.a
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r6r4
					action do
						r6 = ev.r6
						r4 = ev.r4
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(a, r0, rnd(), r6, rnd(), r4, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3ar0_from_m3ar0a_and_m3ar0r0 init INIT {
			composite state INIT init S1 {
				property a : Integer
				property r0 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3ar0a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m3ar0r0
					action do
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3ar0r0
					action do
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3ar0a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3ar0(rnd(), r0, rnd(), rnd(), a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r6r4_from_m3r6r4r6_and_m3r6r4r4 init INIT {
			composite state INIT init S1 {
				property r6 : Integer
				property r4 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r6r4r6
					action do
						r6 = ev.r6
					end
					transition -> S3
					event ev : app?m3r6r4r4
					action do
						r4 = ev.r4
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r6r4r4
					action do
						r4 = ev.r4
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r6r4r6
					action do
						r6 = ev.r6
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r6r4(r6, rnd(), rnd(), rnd(), r4)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
