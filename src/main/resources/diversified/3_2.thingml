datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m2(r9 : Byte, c : Byte, a : Byte@upsize "not", r51 : Byte, r0 : Byte, r30 : Byte, b : Byte@upsize "not", r3 : Integer, r6 : Byte)
	@code "0x1E"
	message m3(r31 : Byte, r7 : Byte, a : Integer, r10 : Byte, r52 : Byte, r1 : Integer, r5 : Byte)
	@code "0x1F"
	message m1(r8 : Byte, r32 : Byte, e : Integer, b : Byte@upsize "not", r11 : Byte, r2 : Byte, d : Integer, r4 : Byte, c : Byte, r53 : Byte, a : Byte@upsize "not")
	@code "0x20"
	message m3r7(r54 : Byte, r12 : Byte, r7 : Byte, r33 : Byte)
	@code "0x21"
	message m3ar1r5(r34 : Byte, r13 : Byte, a : Integer, r55 : Byte, r1 : Integer, r5 : Byte)
	@code "0x22"
	message m1cbr8a(r35 : Byte, c : Byte, r8 : Byte, a : Byte @upsize "not", r14 : Byte, r56 : Byte, b : Byte @upsize "not")
	@code "0x23"
	message m1r4edr2(r36 : Byte, e : Integer, d : Integer, r2 : Byte, r4 : Byte, r57 : Byte, r15 : Byte)
	@code "0x24"
	message m2br3r0(r3 : Integer, r16 : Byte, b : Byte @upsize "not", r58 : Byte, r37 : Byte, r0 : Byte)
	@code "0x25"
	message m2r6ca(r38 : Byte, a : Byte @upsize "not", r6 : Byte, r59 : Byte, c : Byte, r17 : Byte)
	@code "0x26"
	message m3ar1r5a(r60 : Byte, r18 : Byte, a : Integer, r39 : Byte)
	@code "0x27"
	message m3ar1r5r1r5(r61 : Byte, r1 : Integer, r5 : Byte, r19 : Byte, r40 : Byte)
	@code "0x28"
	message m1r4edr2r4ed(r20 : Byte, d : Integer, r4 : Byte, r41 : Byte, r62 : Byte, e : Integer)
	@code "0x29"
	message m1r4edr2r2(r63 : Byte, r21 : Byte, r42 : Byte, r2 : Byte)
	@code "0x2A"
	message m2br3r0b(r43 : Byte, r22 : Byte, b : Byte @upsize "not", r64 : Byte)
	@code "0x2B"
	message m2br3r0r3r0(r65 : Byte, r44 : Byte, r3 : Integer, r0 : Byte, r23 : Byte)
	@code "0x2C"
	message m2r6car6(r6 : Byte, r45 : Byte, r66 : Byte, r24 : Byte)
	@code "0x2D"
	message m2r6caca(r46 : Byte, r25 : Byte, c : Byte, a : Byte @upsize "not", r67 : Byte)
	@code "0x2E"
	message m1r4edr2r4edr4e(r47 : Byte, r26 : Byte, r4 : Byte, e : Integer, r68 : Byte)
	@code "0x2F"
	message m1r4edr2r4edd(d : Integer, r48 : Byte, r27 : Byte, r69 : Byte)
	@code "0x30"
	message m2br3r0r3r0r3(r70 : Byte, r49 : Byte, r28 : Byte, r3 : Integer)
	@code "0x31"
	message m2br3r0r3r0r0(r0 : Byte, r29 : Byte, r71 : Byte, r50 : Byte)
	@code "0x32"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3r7
	sends m3ar1r5a sends m3ar1r5r1r5 receives m1cbr8a receives m1r4edr2r2
		receives m2br3r0b receives m2r6car6 receives m2r6caca receives m1r4edr2r4edr4e receives m1r4edr2r4edd receives m2br3r0r3r0r3 receives m2br3r0r3r0r0
	}
	internal port diversified {
		sends m1 sends m2 sends m1r4edr2r2 sends m1r4edr2 sends m2br3r0b sends m2br3r0 sends m2r6car6 sends m2r6caca sends m2r6ca sends m1r4edr2r4edr4e sends m1r4edr2r4edd sends m1r4edr2r4ed sends m2br3r0r3r0r3 sends m2br3r0r3r0r0 sends m2br3r0r3r0 receives m1 receives m2 receives m1r4edr2r2 receives m1r4edr2 receives m2br3r0b receives m2br3r0 receives m2r6car6 receives m2r6caca receives m2r6ca receives m1r4edr2r4edr4e receives m1r4edr2r4edd receives m1r4edr2r4ed receives m2br3r0r3r0r3 receives m2br3r0r3r0r0 receives m2br3r0r3r0
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "33" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m3r7(rnd(), rnd(), rnd(), rnd())
					end
					do
						do
							println "39" , ", " , rnd(), ", " , rnd(), ", " , id , ", " , rnd(), ", "
							app!m3ar1r5a(rnd(), rnd(), id, rnd())
						end
						do
							println "40" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3ar1r5r1r5(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1cbr8a_and_m1r4edr2 init INIT {
			composite state INIT init S1 {
				property c : Byte
				property b : Byte
				property r8 : Byte
				property a : Byte
				property r4 : Byte
				property e : Integer
				property d : Integer
				property r2 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1cbr8a
					action do
						c = ev.c
						b = ev.b
						r8 = ev.r8
						a = ev.a
					end
					transition -> S3
					event ev : diversified?m1r4edr2
					action do
						r4 = ev.r4
						e = ev.e
						d = ev.d
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1r4edr2
					action do
						r4 = ev.r4
						e = ev.e
						d = ev.d
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1cbr8a
					action do
						c = ev.c
						b = ev.b
						r8 = ev.r8
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(r8, rnd(), e, b, rnd(), r2, d, r4, c, rnd(), a)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2br3r0_and_m2r6ca init INIT {
			composite state INIT init S1 {
				property b : Byte
				property r3 : Integer
				property r0 : Byte
				property r6 : Byte
				property c : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2br3r0
					action do
						b = ev.b
						r3 = ev.r3
						r0 = ev.r0
					end
					transition -> S3
					event ev : diversified?m2r6ca
					action do
						r6 = ev.r6
						c = ev.c
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r6ca
					action do
						r6 = ev.r6
						c = ev.c
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2br3r0
					action do
						b = ev.b
						r3 = ev.r3
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(rnd(), c, a, rnd(), r0, rnd(), b, r3, r6)
					end
					transition -> S1
				}
			}
		}
		region generate_m1r4edr2_from_m1r4edr2r4ed_and_m1r4edr2r2 init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property e : Integer
				property d : Integer
				property r2 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1r4edr2r4ed
					action do
						r4 = ev.r4
						e = ev.e
						d = ev.d
					end
					transition -> S3
					event ev : app?m1r4edr2r2
					action do
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1r4edr2r2
					action do
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1r4edr2r4ed
					action do
						r4 = ev.r4
						e = ev.e
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1r4edr2(rnd(), e, d, r2, r4, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2br3r0_from_m2br3r0b_and_m2br3r0r3r0 init INIT {
			composite state INIT init S1 {
				property b : Byte
				property r3 : Integer
				property r0 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2br3r0b
					action do
						b = ev.b
					end
					transition -> S3
					event ev : diversified?m2br3r0r3r0
					action do
						r3 = ev.r3
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2br3r0r3r0
					action do
						r3 = ev.r3
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2br3r0b
					action do
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2br3r0(r3, rnd(), b, rnd(), rnd(), r0)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r6ca_from_m2r6car6_and_m2r6caca init INIT {
			composite state INIT init S1 {
				property r6 : Byte
				property c : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r6car6
					action do
						r6 = ev.r6
					end
					transition -> S3
					event ev : app?m2r6caca
					action do
						c = ev.c
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r6caca
					action do
						c = ev.c
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r6car6
					action do
						r6 = ev.r6
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r6ca(rnd(), a, r6, rnd(), c, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1r4edr2r4ed_from_m1r4edr2r4edr4e_and_m1r4edr2r4edd init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property e : Integer
				property d : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1r4edr2r4edr4e
					action do
						r4 = ev.r4
						e = ev.e
					end
					transition -> S3
					event ev : app?m1r4edr2r4edd
					action do
						d = ev.d
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1r4edr2r4edd
					action do
						d = ev.d
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1r4edr2r4edr4e
					action do
						r4 = ev.r4
						e = ev.e
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1r4edr2r4ed(rnd(), d, r4, rnd(), rnd(), e)
					end
					transition -> S1
				}
			}
		}
		region generate_m2br3r0r3r0_from_m2br3r0r3r0r3_and_m2br3r0r3r0r0 init INIT {
			composite state INIT init S1 {
				property r3 : Integer
				property r0 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2br3r0r3r0r3
					action do
						r3 = ev.r3
					end
					transition -> S3
					event ev : app?m2br3r0r3r0r0
					action do
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2br3r0r3r0r0
					action do
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2br3r0r3r0r3
					action do
						r3 = ev.r3
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2br3r0r3r0(rnd(), rnd(), r3, r0, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1cbr8a sends m1r4edr2r2
		sends m2br3r0b sends m2r6car6 sends m2r6caca sends m1r4edr2r4edr4e sends m1r4edr2r4edd sends m2br3r0r3r0r3 sends m2br3r0r3r0r0 receives m3r7
	receives m3ar1r5a receives m3ar1r5r1r5
	}
	internal port diversified {
		sends m3 sends m3ar1r5a sends m3ar1r5r1r5 sends m3ar1r5 receives m3 receives m3ar1r5a receives m3ar1r5r1r5 receives m3ar1r5
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						println "35" , ", " , rnd(), ", " , _c , ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", " , _b , ", "
						app!m1cbr8a(rnd(), _c, rnd(), _a, rnd(), rnd(), _b)
					end
					do
						do
							do
								println "47" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", " , rnd(), ", "
								app!m1r4edr2r4edr4e(rnd(), rnd(), rnd(), _e, rnd())
							end
							do
								println "48" , ", " , _d , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1r4edr2r4edd(_d, rnd(), rnd(), rnd())
							end
						end
						do
							println "42" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1r4edr2r2(rnd(), rnd(), rnd(), rnd())
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						do
							println "43" , ", " , rnd(), ", " , rnd(), ", " , _b , ", " , rnd(), ", "
							app!m2br3r0b(rnd(), rnd(), _b, rnd())
						end
						do
							do
								println "49" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m2br3r0r3r0r3(rnd(), rnd(), rnd(), rnd())
							end
							do
								println "50" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m2br3r0r3r0r0(rnd(), rnd(), rnd(), rnd())
							end
						end
					end
					do
						do
							println "45" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r6car6(rnd(), rnd(), rnd(), rnd())
						end
						do
							println "46" , ", " , rnd(), ", " , rnd(), ", " , _c , ", " , _a , ", " , rnd(), ", "
							app!m2r6caca(rnd(), rnd(), _c, _a, rnd())
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r7_and_m3ar1r5 init INIT {
			composite state INIT init S1 {
				property r7 : Byte
				property a : Integer
				property r1 : Integer
				property r5 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r7
					action do
						r7 = ev.r7
					end
					transition -> S3
					event ev : diversified?m3ar1r5
					action do
						a = ev.a
						r1 = ev.r1
						r5 = ev.r5
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3ar1r5
					action do
						a = ev.a
						r1 = ev.r1
						r5 = ev.r5
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r7
					action do
						r7 = ev.r7
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(rnd(), r7, a, rnd(), rnd(), r1, r5)
					end
					transition -> S1
				}
			}
		}
		region generate_m3ar1r5_from_m3ar1r5a_and_m3ar1r5r1r5 init INIT {
			composite state INIT init S1 {
				property a : Integer
				property r1 : Integer
				property r5 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3ar1r5a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m3ar1r5r1r5
					action do
						r1 = ev.r1
						r5 = ev.r5
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3ar1r5r1r5
					action do
						r1 = ev.r1
						r5 = ev.r5
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3ar1r5a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3ar1r5(rnd(), rnd(), a, rnd(), r1, r5)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
