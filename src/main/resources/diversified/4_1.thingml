datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m1(r9 : Byte, d : Byte, r0 : Byte, b : Byte@upsize "not", r7 : Byte, r12 : Byte, e : Integer, a : Byte@upsize "not", r5 : Byte, c : Integer, r99 : Byte, r41 : Byte, r70 : Byte)
	@code "0xB8"
	message m2(r6 : Byte, a : Byte@upsize "not", r100 : Byte, r42 : Byte, r2 : Integer, c : Byte, r3 : Integer, r10 : Byte, r13 : Byte, b : Byte@upsize "not", r71 : Byte)
	@code "0xB9"
	message m3(r11 : Byte, r43 : Byte, r72 : Byte, r14 : Byte, r101 : Byte, r1 : Integer, r4 : Byte, a : Byte, r8 : Integer)
	@code "0xBA"
	message m3r8r4r1r11(r73 : Byte, r44 : Byte, r8 : Integer, r4 : Byte, r1 : Integer, r11 : Byte, r102 : Byte, r15 : Byte)
	@code "0xBB"
	message m3a(r45 : Byte, r16 : Byte, r103 : Byte, r74 : Byte, a : Byte)
	@code "0xBC"
	message m1ar9bdr0r5(r0 : Byte, r104 : Byte, a : Byte @upsize "not", r46 : Byte, b : Byte @upsize "not", r5 : Byte, r17 : Byte, r75 : Byte, d : Byte, r9 : Byte)
	@code "0xBD"
	message m1ecr7(r76 : Byte, c : Integer, e : Integer, r18 : Byte, r105 : Byte, r47 : Byte, r7 : Byte)
	@code "0xBE"
	message m2cr3r10br6r2(r3 : Integer, c : Byte, r10 : Byte, r6 : Byte, r2 : Integer, r106 : Byte, r77 : Byte, r48 : Byte, r19 : Byte, b : Byte @upsize "not")
	@code "0xBF"
	message m2a(r78 : Byte, a : Byte @upsize "not", r20 : Byte, r49 : Byte, r107 : Byte)
	@code "0xC0"
	message m3r8r4r1r11r8(r21 : Byte, r8 : Integer, r50 : Byte, r79 : Byte, r108 : Byte)
	@code "0xC1"
	message m3r8r4r1r11r4r1r11(r11 : Byte, r4 : Byte, r80 : Byte, r109 : Byte, r22 : Byte, r1 : Integer, r51 : Byte)
	@code "0xC2"
	message m1ar9bdr0r5ar9bdr0(r110 : Byte, r9 : Byte, r23 : Byte, b : Byte @upsize "not", a : Byte @upsize "not", r0 : Byte, r52 : Byte, d : Byte, r81 : Byte)
	@code "0xC3"
	message m1ar9bdr0r5r5(r24 : Byte, r5 : Byte, r111 : Byte, r53 : Byte, r82 : Byte)
	@code "0xC4"
	message m1ecr7ec(c : Integer, e : Integer, r83 : Byte, r54 : Byte, r25 : Byte, r112 : Byte)
	@code "0xC5"
	message m1ecr7r7(r55 : Byte, r84 : Byte, r26 : Byte, r113 : Byte, r7 : Byte)
	@code "0xC6"
	message m2cr3r10br6r2c(c : Byte, r85 : Byte, r114 : Byte, r56 : Byte, r27 : Byte)
	@code "0xC7"
	message m2cr3r10br6r2r3r10br6r2(r115 : Byte, r6 : Byte, r10 : Byte, r57 : Byte, b : Byte @upsize "not", r2 : Integer, r86 : Byte, r3 : Integer, r28 : Byte)
	@code "0xC8"
	message m1ar9bdr0r5ar9bdr0ar9bd(b : Byte @upsize "not", r87 : Byte, r9 : Byte, r29 : Byte, d : Byte, r116 : Byte, a : Byte @upsize "not", r58 : Byte)
	@code "0xC9"
	message m1ar9bdr0r5ar9bdr0r0(r88 : Byte, r30 : Byte, r117 : Byte, r59 : Byte, r0 : Byte)
	@code "0xCA"
	message m2cr3r10br6r2r3r10br6r2r3r10(r10 : Byte, r31 : Byte, r60 : Byte, r118 : Byte, r3 : Integer, r89 : Byte)
	@code "0xCB"
	message m2cr3r10br6r2r3r10br6r2br6r2(r32 : Byte, r2 : Integer, r90 : Byte, r119 : Byte, b : Byte @upsize "not", r61 : Byte, r6 : Byte)
	@code "0xCC"
	message m3r8r4r1r11r4r1r11r4r1(r33 : Byte, r91 : Byte, r120 : Byte, r4 : Byte, r62 : Byte, r1 : Integer)
	@code "0xCD"
	message m3r8r4r1r11r4r1r11r11(r92 : Byte, r34 : Byte, r63 : Byte, r121 : Byte, r11 : Byte)
	@code "0xCE"
	message m1ecr7ece(r93 : Byte, r35 : Byte, r122 : Byte, r64 : Byte, e : Integer)
	@code "0xCF"
	message m1ecr7ecc(r65 : Byte, c : Integer, r94 : Byte, r123 : Byte, r36 : Byte)
	@code "0xD0"
	message m1ar9bdr0r5ar9bdr0ar9bda(a : Byte @upsize "not", r37 : Byte, r124 : Byte, r66 : Byte, r95 : Byte)
	@code "0xD1"
	message m1ar9bdr0r5ar9bdr0ar9bdr9bd(d : Byte, r67 : Byte, r96 : Byte, r38 : Byte, b : Byte @upsize "not", r9 : Byte, r125 : Byte)
	@code "0xD2"
	message m2cr3r10br6r2r3r10br6r2br6r2br6(r97 : Byte, r6 : Byte, r39 : Byte, b : Byte @upsize "not", r126 : Byte, r68 : Byte)
	@code "0xD3"
	message m2cr3r10br6r2r3r10br6r2br6r2r2(r40 : Byte, r98 : Byte, r127 : Byte, r2 : Integer, r69 : Byte)
	@code "0xD4"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3a
	sends m3r8r4r1r11r8 sends m3r8r4r1r11r4r1r11r4r1 sends m3r8r4r1r11r4r1r11r11 receives m2a receives m1ar9bdr0r5r5
		receives m1ecr7r7 receives m2cr3r10br6r2c receives m1ar9bdr0r5ar9bdr0r0 receives m2cr3r10br6r2r3r10br6r2r3r10 receives m1ecr7ece receives m1ecr7ecc receives m1ar9bdr0r5ar9bdr0ar9bda receives m1ar9bdr0r5ar9bdr0ar9bdr9bd receives m2cr3r10br6r2r3r10br6r2br6r2br6 receives m2cr3r10br6r2r3r10br6r2br6r2r2
	}
	internal port diversified {
		sends m1 sends m2a sends m2 sends m1ar9bdr0r5r5 sends m1ar9bdr0r5 sends m1ecr7r7 sends m1ecr7 sends m2cr3r10br6r2c sends m2cr3r10br6r2 sends m1ar9bdr0r5ar9bdr0r0 sends m1ar9bdr0r5ar9bdr0 sends m2cr3r10br6r2r3r10br6r2r3r10 sends m2cr3r10br6r2r3r10br6r2 sends m1ecr7ece sends m1ecr7ecc sends m1ecr7ec sends m1ar9bdr0r5ar9bdr0ar9bda sends m1ar9bdr0r5ar9bdr0ar9bdr9bd sends m1ar9bdr0r5ar9bdr0ar9bd sends m2cr3r10br6r2r3r10br6r2br6r2br6 sends m2cr3r10br6r2r3r10br6r2br6r2r2 sends m2cr3r10br6r2r3r10br6r2br6r2 receives m1 receives m2a receives m2 receives m1ar9bdr0r5r5 receives m1ar9bdr0r5 receives m1ecr7r7 receives m1ecr7 receives m2cr3r10br6r2c receives m2cr3r10br6r2 receives m1ar9bdr0r5ar9bdr0r0 receives m1ar9bdr0r5ar9bdr0 receives m2cr3r10br6r2r3r10br6r2r3r10 receives m2cr3r10br6r2r3r10br6r2 receives m1ecr7ece receives m1ecr7ecc receives m1ecr7ec receives m1ar9bdr0r5ar9bdr0ar9bda receives m1ar9bdr0r5ar9bdr0ar9bdr9bd receives m1ar9bdr0r5ar9bdr0ar9bd receives m2cr3r10br6r2r3r10br6r2br6r2br6 receives m2cr3r10br6r2r3r10br6r2br6r2r2 receives m2cr3r10br6r2r3r10br6r2br6r2
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						do
							println "-63" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r8r4r1r11r8(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "-51" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r8r4r1r11r4r1r11r4r1(rnd(), rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "-50" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r8r4r1r11r4r1r11r11(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
					end
					do
						println "-68" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
						app!m3a(rnd(), rnd(), rnd(), rnd(), id)
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1ar9bdr0r5_and_m1ecr7 init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r9 : Byte
				property b : Byte
				property d : Byte
				property r0 : Byte
				property r5 : Byte
				property e : Integer
				property c : Integer
				property r7 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1ar9bdr0r5
					action do
						a = ev.a
						r9 = ev.r9
						b = ev.b
						d = ev.d
						r0 = ev.r0
						r5 = ev.r5
					end
					transition -> S3
					event ev : diversified?m1ecr7
					action do
						e = ev.e
						c = ev.c
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ecr7
					action do
						e = ev.e
						c = ev.c
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ar9bdr0r5
					action do
						a = ev.a
						r9 = ev.r9
						b = ev.b
						d = ev.d
						r0 = ev.r0
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(r9, d, r0, b, r7, rnd(), e, a, r5, c, rnd(), rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2cr3r10br6r2_and_m2a init INIT {
			composite state INIT init S1 {
				property c : Byte
				property r3 : Integer
				property r10 : Byte
				property b : Byte
				property r6 : Byte
				property r2 : Integer
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2cr3r10br6r2
					action do
						c = ev.c
						r3 = ev.r3
						r10 = ev.r10
						b = ev.b
						r6 = ev.r6
						r2 = ev.r2
					end
					transition -> S3
					event ev : app?m2a
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2a
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2cr3r10br6r2
					action do
						c = ev.c
						r3 = ev.r3
						r10 = ev.r10
						b = ev.b
						r6 = ev.r6
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r6, a, rnd(), rnd(), r2, c, r3, r10, rnd(), b, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1ar9bdr0r5_from_m1ar9bdr0r5ar9bdr0_and_m1ar9bdr0r5r5 init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r9 : Byte
				property b : Byte
				property d : Byte
				property r0 : Byte
				property r5 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1ar9bdr0r5ar9bdr0
					action do
						a = ev.a
						r9 = ev.r9
						b = ev.b
						d = ev.d
						r0 = ev.r0
					end
					transition -> S3
					event ev : app?m1ar9bdr0r5r5
					action do
						r5 = ev.r5
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1ar9bdr0r5r5
					action do
						r5 = ev.r5
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ar9bdr0r5ar9bdr0
					action do
						a = ev.a
						r9 = ev.r9
						b = ev.b
						d = ev.d
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ar9bdr0r5(r0, rnd(), a, rnd(), b, r5, rnd(), rnd(), d, r9)
					end
					transition -> S1
				}
			}
		}
		region generate_m1ecr7_from_m1ecr7ec_and_m1ecr7r7 init INIT {
			composite state INIT init S1 {
				property e : Integer
				property c : Integer
				property r7 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1ecr7ec
					action do
						e = ev.e
						c = ev.c
					end
					transition -> S3
					event ev : app?m1ecr7r7
					action do
						r7 = ev.r7
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1ecr7r7
					action do
						r7 = ev.r7
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ecr7ec
					action do
						e = ev.e
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ecr7(rnd(), c, e, rnd(), rnd(), rnd(), r7)
					end
					transition -> S1
				}
			}
		}
		region generate_m2cr3r10br6r2_from_m2cr3r10br6r2c_and_m2cr3r10br6r2r3r10br6r2 init INIT {
			composite state INIT init S1 {
				property c : Byte
				property r3 : Integer
				property r10 : Byte
				property b : Byte
				property r6 : Byte
				property r2 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2cr3r10br6r2c
					action do
						c = ev.c
					end
					transition -> S3
					event ev : diversified?m2cr3r10br6r2r3r10br6r2
					action do
						r3 = ev.r3
						r10 = ev.r10
						b = ev.b
						r6 = ev.r6
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2cr3r10br6r2r3r10br6r2
					action do
						r3 = ev.r3
						r10 = ev.r10
						b = ev.b
						r6 = ev.r6
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2cr3r10br6r2c
					action do
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2cr3r10br6r2(r3, c, r10, r6, r2, rnd(), rnd(), rnd(), rnd(), b)
					end
					transition -> S1
				}
			}
		}
		region generate_m1ar9bdr0r5ar9bdr0_from_m1ar9bdr0r5ar9bdr0ar9bd_and_m1ar9bdr0r5ar9bdr0r0 init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r9 : Byte
				property b : Byte
				property d : Byte
				property r0 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1ar9bdr0r5ar9bdr0ar9bd
					action do
						a = ev.a
						r9 = ev.r9
						b = ev.b
						d = ev.d
					end
					transition -> S3
					event ev : app?m1ar9bdr0r5ar9bdr0r0
					action do
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1ar9bdr0r5ar9bdr0r0
					action do
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1ar9bdr0r5ar9bdr0ar9bd
					action do
						a = ev.a
						r9 = ev.r9
						b = ev.b
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ar9bdr0r5ar9bdr0(rnd(), r9, rnd(), b, a, r0, rnd(), d, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2cr3r10br6r2r3r10br6r2_from_m2cr3r10br6r2r3r10br6r2r3r10_and_m2cr3r10br6r2r3r10br6r2br6r2 init INIT {
			composite state INIT init S1 {
				property r3 : Integer
				property r10 : Byte
				property b : Byte
				property r6 : Byte
				property r2 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2cr3r10br6r2r3r10br6r2r3r10
					action do
						r3 = ev.r3
						r10 = ev.r10
					end
					transition -> S3
					event ev : diversified?m2cr3r10br6r2r3r10br6r2br6r2
					action do
						b = ev.b
						r6 = ev.r6
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2cr3r10br6r2r3r10br6r2br6r2
					action do
						b = ev.b
						r6 = ev.r6
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2cr3r10br6r2r3r10br6r2r3r10
					action do
						r3 = ev.r3
						r10 = ev.r10
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2cr3r10br6r2r3r10br6r2(rnd(), r6, r10, rnd(), b, r2, rnd(), r3, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1ecr7ec_from_m1ecr7ece_and_m1ecr7ecc init INIT {
			composite state INIT init S1 {
				property e : Integer
				property c : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1ecr7ece
					action do
						e = ev.e
					end
					transition -> S3
					event ev : app?m1ecr7ecc
					action do
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1ecr7ecc
					action do
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1ecr7ece
					action do
						e = ev.e
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ecr7ec(c, e, rnd(), rnd(), rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1ar9bdr0r5ar9bdr0ar9bd_from_m1ar9bdr0r5ar9bdr0ar9bda_and_m1ar9bdr0r5ar9bdr0ar9bdr9bd init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r9 : Byte
				property b : Byte
				property d : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1ar9bdr0r5ar9bdr0ar9bda
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m1ar9bdr0r5ar9bdr0ar9bdr9bd
					action do
						r9 = ev.r9
						b = ev.b
						d = ev.d
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1ar9bdr0r5ar9bdr0ar9bdr9bd
					action do
						r9 = ev.r9
						b = ev.b
						d = ev.d
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1ar9bdr0r5ar9bdr0ar9bda
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1ar9bdr0r5ar9bdr0ar9bd(b, rnd(), r9, rnd(), d, rnd(), a, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2cr3r10br6r2r3r10br6r2br6r2_from_m2cr3r10br6r2r3r10br6r2br6r2br6_and_m2cr3r10br6r2r3r10br6r2br6r2r2 init INIT {
			composite state INIT init S1 {
				property b : Byte
				property r6 : Byte
				property r2 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2cr3r10br6r2r3r10br6r2br6r2br6
					action do
						b = ev.b
						r6 = ev.r6
					end
					transition -> S3
					event ev : app?m2cr3r10br6r2r3r10br6r2br6r2r2
					action do
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2cr3r10br6r2r3r10br6r2br6r2r2
					action do
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2cr3r10br6r2r3r10br6r2br6r2br6
					action do
						b = ev.b
						r6 = ev.r6
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2cr3r10br6r2r3r10br6r2br6r2(rnd(), r2, rnd(), rnd(), b, rnd(), r6)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m2a sends m1ar9bdr0r5r5
		sends m1ecr7r7 sends m2cr3r10br6r2c sends m1ar9bdr0r5ar9bdr0r0 sends m2cr3r10br6r2r3r10br6r2r3r10 sends m1ecr7ece sends m1ecr7ecc sends m1ar9bdr0r5ar9bdr0ar9bda sends m1ar9bdr0r5ar9bdr0ar9bdr9bd sends m2cr3r10br6r2r3r10br6r2br6r2br6 sends m2cr3r10br6r2r3r10br6r2br6r2r2 receives m3a
	receives m3r8r4r1r11r8 receives m3r8r4r1r11r4r1r11r4r1 receives m3r8r4r1r11r4r1r11r11
	}
	internal port diversified {
		sends m3 sends m3r8r4r1r11r8 sends m3r8r4r1r11 sends m3r8r4r1r11r4r1r11r4r1 sends m3r8r4r1r11r4r1r11r11 sends m3r8r4r1r11r4r1r11 receives m3 receives m3r8r4r1r11r8 receives m3r8r4r1r11 receives m3r8r4r1r11r4r1r11r4r1 receives m3r8r4r1r11r4r1r11r11 receives m3r8r4r1r11r4r1r11
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						do
							do
								do
									println "-47" , ", " , _a , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m1ar9bdr0r5ar9bdr0ar9bda(_a, rnd(), rnd(), rnd(), rnd())
								end
								do
									println "-46" , ", " , _d , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", "
									app!m1ar9bdr0r5ar9bdr0ar9bdr9bd(_d, rnd(), rnd(), rnd(), _b, rnd(), rnd())
								end
							end
							do
								println "-54" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1ar9bdr0r5ar9bdr0r0(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							println "-60" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1ar9bdr0r5r5(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
					do
						do
							do
								println "-49" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", "
								app!m1ecr7ece(rnd(), rnd(), rnd(), rnd(), _e)
							end
							do
								println "-48" , ", " , rnd(), ", " , _c , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m1ecr7ecc(rnd(), _c, rnd(), rnd(), rnd())
							end
						end
						do
							println "-58" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m1ecr7r7(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						do
							println "-57" , ", " , _c , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2cr3r10br6r2c(_c, rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "-53" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m2cr3r10br6r2r3r10br6r2r3r10(rnd(), rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								do
									println "-45" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", "
									app!m2cr3r10br6r2r3r10br6r2br6r2br6(rnd(), rnd(), rnd(), _b, rnd(), rnd())
								end
								do
									println "-44" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m2cr3r10br6r2r3r10br6r2br6r2r2(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
						end
					end
					do
						println "-64" , ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m2a(rnd(), _a, rnd(), rnd(), rnd())
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r8r4r1r11_and_m3a init INIT {
			composite state INIT init S1 {
				property r8 : Integer
				property r4 : Byte
				property r1 : Integer
				property r11 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3r8r4r1r11
					action do
						r8 = ev.r8
						r4 = ev.r4
						r1 = ev.r1
						r11 = ev.r11
					end
					transition -> S3
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r8r4r1r11
					action do
						r8 = ev.r8
						r4 = ev.r4
						r1 = ev.r1
						r11 = ev.r11
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r11, rnd(), rnd(), rnd(), rnd(), r1, r4, a, r8)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r8r4r1r11_from_m3r8r4r1r11r8_and_m3r8r4r1r11r4r1r11 init INIT {
			composite state INIT init S1 {
				property r8 : Integer
				property r4 : Byte
				property r1 : Integer
				property r11 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r8r4r1r11r8
					action do
						r8 = ev.r8
					end
					transition -> S3
					event ev : diversified?m3r8r4r1r11r4r1r11
					action do
						r4 = ev.r4
						r1 = ev.r1
						r11 = ev.r11
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r8r4r1r11r4r1r11
					action do
						r4 = ev.r4
						r1 = ev.r1
						r11 = ev.r11
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r8r4r1r11r8
					action do
						r8 = ev.r8
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r8r4r1r11(rnd(), rnd(), r8, r4, r1, r11, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r8r4r1r11r4r1r11_from_m3r8r4r1r11r4r1r11r4r1_and_m3r8r4r1r11r4r1r11r11 init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property r1 : Integer
				property r11 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r8r4r1r11r4r1r11r4r1
					action do
						r4 = ev.r4
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m3r8r4r1r11r4r1r11r11
					action do
						r11 = ev.r11
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r8r4r1r11r4r1r11r11
					action do
						r11 = ev.r11
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r8r4r1r11r4r1r11r4r1
					action do
						r4 = ev.r4
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r8r4r1r11r4r1r11(r11, r4, rnd(), rnd(), rnd(), r1, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
