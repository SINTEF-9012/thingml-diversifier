datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<8>
	@type_checker "Integer"
	@java_type "long"
	
object Random
	@java_type "java.util.Random"
thing fragment Msgs {
	
	readonly property rnd : Random = `new java.util.Random()`
	
	message m2(r1 : Byte, a : Byte @upsize "not", r0 : Byte, b : Byte @upsize "not", c : Byte)
	@code "0x00"
	message m2bis(r1 : Byte, a : Byte @upsize "not", r0 : Byte, b : Byte @upsize "not", c : Byte)
	@code "0x01"
	message m3bis(r5 : Byte, r2 : Byte, r3 : Byte, r4 : Byte, a : Byte)
	@code "0x02"
	message m1(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte, e : Byte)
	@code "0x03"
	message m1bis(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte, e : Byte)
	@code "0x04"
	message m3(r5 : Byte, r2 : Byte, r3 : Byte, r4 : Byte, a : Byte)
	@code "0x05"
	message m2bisbis(r1 : Byte, a : Byte @upsize "not", r0 : Byte, b : Byte @upsize "not", c : Byte)
	@code "0x06"
	message m3bisbis(r5 : Byte, r2 : Byte, r3 : Byte, r4 : Byte, a : Byte)
	@code "0x07"
	message m1bisbis(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte, e : Byte)
	@code "0x08"
	message m3r5r2(r5 : Byte, r6 : Byte, r8 : Byte, r7 : Byte, r2 : Byte)
	@code "0x09"
	message m3r3r4a(r3 : Byte, r9 : Byte, r4 : Byte, r10 : Byte, a : Byte)
	@code "0x0A"
	message m3bisr5(r11 : Byte, r13 : Byte, r12 : Byte, r14 : Byte, r5 : Byte)
	@code "0x0B"
	message m3bisr2r3r4a(r2 : Byte, r3 : Byte, r4 : Byte, r15 : Byte, a : Byte)
	@code "0x0C"
	message m3bisbisr5r2r3(r17 : Byte, r5 : Byte, r16 : Byte, r2 : Byte, r3 : Byte)
	@code "0x0D"
	message m3bisbisr4a(r19 : Byte, r20 : Byte, r18 : Byte, r4 : Byte, a : Byte)
	@code "0x0E"
	message m1abcd(r21 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte)
	@code "0x0F"
	message m1e(r22 : Byte, r23 : Byte, r25 : Byte, r24 : Byte, e : Byte)
	@code "0x10"
	message m2r1(r29 : Byte, r26 : Byte, r27 : Byte, r28 : Byte, r1 : Byte)
	@code "0x11"
	message m2ar0bc(r30 : Byte, a : Byte @upsize "not", r0 : Byte, b : Byte @upsize "not", c : Byte)
	@code "0x12"
	message m2bisr1ar0(r32 : Byte, r1 : Byte, r31 : Byte, a : Byte @upsize "not", r0 : Byte)
	@code "0x13"
	message m2bisbc(r35 : Byte, b : Byte @upsize "not", r33 : Byte, r34 : Byte, c : Byte)
	@code "0x14"
	message m1bisabc(r36 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", r37 : Byte, c : Byte)
	@code "0x15"
	message m1bisde(r38 : Byte, r40 : Byte, d : Byte, r39 : Byte, e : Byte)
	@code "0x16"
	message m2bisbisr1a(r43 : Byte, r41 : Byte, r42 : Byte, r1 : Byte, a : Byte @upsize "not")
	@code "0x17"
	message m2bisbisr0bc(r44 : Byte, r45 : Byte, r0 : Byte, b : Byte @upsize "not", c : Byte)
	@code "0x18"
	message m1bisbisabcd(a : Byte @upsize "not", b : Byte @upsize "not", r46 : Byte, c : Byte, d : Byte)
	@code "0x19"
	message m1bisbise(r47 : Byte, r48 : Byte, r49 : Byte, r50 : Byte, e : Byte)
	@code "0x1A"
	message m3r5r2r5(r51 : Byte, r52 : Byte, r54 : Byte, r53 : Byte, r5 : Byte)
	@code "0x1B"
	message m3r5r2r2(r57 : Byte, r58 : Byte, r56 : Byte, r55 : Byte, r2 : Byte)
	@code "0x1C"
	message m3r3r4ar3r4(r61 : Byte, r3 : Byte, r59 : Byte, r60 : Byte, r4 : Byte)
	@code "0x1D"
	message m3r3r4aa(r63 : Byte, r62 : Byte, r64 : Byte, r65 : Byte, a : Byte)
	@code "0x1E"
	message m3bisr2r3r4ar2r3(r67 : Byte, r66 : Byte, r2 : Byte, r68 : Byte, r3 : Byte)
	@code "0x1F"
	message m3bisr2r3r4ar4a(r70 : Byte, r69 : Byte, r4 : Byte, r71 : Byte, a : Byte)
	@code "0x20"
	message m3bisbisr5r2r3r5(r72 : Byte, r73 : Byte, r75 : Byte, r74 : Byte, r5 : Byte)
	@code "0x21"
	message m3bisbisr5r2r3r2r3(r78 : Byte, r77 : Byte, r2 : Byte, r76 : Byte, r3 : Byte)
	@code "0x22"
	message m3bisbisr4ar4(r82 : Byte, r79 : Byte, r81 : Byte, r80 : Byte, r4 : Byte)
	@code "0x23"
	message m3bisbisr4aa(r84 : Byte, r85 : Byte, r86 : Byte, r83 : Byte, a : Byte)
	@code "0x24"
	message m1abcdab(r88 : Byte, r87 : Byte, a : Byte @upsize "not", r89 : Byte, b : Byte @upsize "not")
	@code "0x25"
	message m1abcdcd(c : Byte, r91 : Byte, r90 : Byte, r92 : Byte, d : Byte)
	@code "0x26"
	message m2ar0bca(r96 : Byte, r94 : Byte, r93 : Byte, r95 : Byte, a : Byte @upsize "not")
	@code "0x27"
	message m2ar0bcr0bc(r0 : Byte, b : Byte @upsize "not", r97 : Byte, r98 : Byte, c : Byte)
	@code "0x28"
	message m2bisr1ar0r1a(r1 : Byte, r99 : Byte, r101 : Byte, r100 : Byte, a : Byte @upsize "not")
	@code "0x29"
	message m2bisr1ar0r0(r102 : Byte, r104 : Byte, r103 : Byte, r105 : Byte, r0 : Byte)
	@code "0x2A"
	message m2bisbcb(r108 : Byte, r107 : Byte, r106 : Byte, r109 : Byte, b : Byte @upsize "not")
	@code "0x2B"
	message m2bisbcc(r113 : Byte, r111 : Byte, r112 : Byte, r110 : Byte, c : Byte)
	@code "0x2C"
	message m1bisabca(r117 : Byte, r116 : Byte, r114 : Byte, r115 : Byte, a : Byte @upsize "not")
	@code "0x2D"
	message m1bisabcbc(r118 : Byte, b : Byte @upsize "not", r119 : Byte, r120 : Byte, c : Byte)
	@code "0x2E"
	message m2bisbisr1ar1(r124 : Byte, r121 : Byte, r122 : Byte, r123 : Byte, r1 : Byte)
	@code "0x2F"
	message m2bisbisr1aa(r125 : Byte, r127 : Byte, r128 : Byte, r126 : Byte, a : Byte @upsize "not")
	@code "0x30"
	message m1bisbisabcda(r130 : Byte, r131 : Byte, r129 : Byte, r132 : Byte, a : Byte @upsize "not")
	@code "0x31"
	message m1bisbisabcdbcd(r133 : Byte, r134 : Byte, b : Byte @upsize "not", c : Byte, d : Byte)
	@code "0x32"
	function rnd() : Byte do
		return `(byte) ` & rnd & `.nextInt(256)`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3bisr5 sends m3r5r2r5 sends m3r5r2r2 sends m3r3r4ar3r4 sends m3r3r4aa sends m3bisr2r3r4ar2r3 sends m3bisr2r3r4ar4a sends m3bisbisr5r2r3r5 sends m3bisbisr5r2r3r2r3 sends m3bisbisr4ar4 sends m3bisbisr4aa receives m1e receives m2r1 receives m1bisde receives m2bisbisr0bc receives m1bisbise receives m1abcdab receives m1abcdcd receives m2ar0bca receives m2ar0bcr0bc receives m2bisr1ar0r1a receives m2bisr1ar0r0 receives m2bisbcb receives m2bisbcc receives m1bisabca receives m1bisabcbc receives m2bisbisr1ar1 receives m2bisbisr1aa receives m1bisbisabcda receives m1bisbisabcdbcd
	}
	internal port diversified {
		sends m1 sends m2r1 sends m2 sends m2bis sends m1bisde sends m1bis sends m2bisbisr0bc sends m2bisbis sends m1bisbise sends m1bisbis sends m1abcdab sends m1abcdcd sends m1abcd sends m2ar0bca sends m2ar0bcr0bc sends m2ar0bc sends m2bisr1ar0r1a sends m2bisr1ar0r0 sends m2bisr1ar0 sends m2bisbcb sends m2bisbcc sends m2bisbc sends m1bisabca sends m1bisabcbc sends m1bisabc sends m2bisbisr1ar1 sends m2bisbisr1aa sends m2bisbisr1a sends m1bisbisabcda sends m1bisbisabcdbcd sends m1bisbisabcd receives m1 receives m2r1 receives m2 receives m2bis receives m1bisde receives m1bis receives m2bisbisr0bc receives m2bisbis receives m1bisbise receives m1bisbis receives m1abcdab receives m1abcdcd receives m1abcd receives m2ar0bca receives m2ar0bcr0bc receives m2ar0bc receives m2bisr1ar0r1a receives m2bisr1ar0r0 receives m2bisr1ar0 receives m2bisbcb receives m2bisbcc receives m2bisbc receives m1bisabca receives m1bisabcbc receives m1bisabc receives m2bisbisr1ar1 receives m2bisbisr1aa receives m2bisbisr1a receives m1bisbisabcda receives m1bisbisabcdbcd receives m1bisbisabcd
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
			transition -> WaitForM2
			event e : diversified?m1bis
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
			transition -> WaitForM2
			event e : diversified?m1bisbis
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
			transition -> SendAck
			event e : diversified?m2bis
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
			transition -> SendAck
			event e : diversified?m2bisbis
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				if (rnd()< 130) do
					do
						do
							do
								println "27" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r5r2r5(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "28" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r5r2r2(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							do
								println "29" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r3r4ar3r4(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								println "30" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
								app!m3r3r4aa(rnd(), rnd(), rnd(), rnd(), id)
							end
						end
					end
				end
				else do
					if (rnd()< 181) do
						do
							do
								println "11" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3bisr5(rnd(), rnd(), rnd(), rnd(), rnd())
							end
							do
								do
									println "31" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m3bisr2r3r4ar2r3(rnd(), rnd(), rnd(), rnd(), rnd())
								end
								do
									println "32" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
									app!m3bisr2r3r4ar4a(rnd(), rnd(), rnd(), rnd(), id)
								end
							end
						end
					end
					else do
						do
							do
								do
									println "33" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m3bisbisr5r2r3r5(rnd(), rnd(), rnd(), rnd(), rnd())
								end
								do
									println "34" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m3bisbisr5r2r3r2r3(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
							do
								do
									println "35" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m3bisbisr4ar4(rnd(), rnd(), rnd(), rnd(), rnd())
								end
								do
									println "36" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
									app!m3bisbisr4aa(rnd(), rnd(), rnd(), rnd(), id)
								end
							end
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1abcd_and_m1e init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1abcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
					transition -> S3
					event ev : app?m1e
					action do
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1e
					action do
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1abcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2r1_and_m2ar0bc init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property a : Byte
				property r0 : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r1
					action do
						r1 = ev.r1
					end
					transition -> S3
					event ev : diversified?m2ar0bc
					action do
						a = ev.a
						r0 = ev.r0
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2ar0bc
					action do
						a = ev.a
						r0 = ev.r0
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r1
					action do
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r1, a, r0, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2bis_from_m2bisr1ar0_and_m2bisbc init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property a : Byte
				property r0 : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2bisr1ar0
					action do
						r1 = ev.r1
						a = ev.a
						r0 = ev.r0
					end
					transition -> S3
					event ev : diversified?m2bisbc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2bisbc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2bisr1ar0
					action do
						r1 = ev.r1
						a = ev.a
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2bis(r1, a, r0, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1bis_from_m1bisabc_and_m1bisde init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1bisabc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
					transition -> S3
					event ev : app?m1bisde
					action do
						d = ev.d
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1bisde
					action do
						d = ev.d
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1bisabc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1bis(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
		region generate_m2bisbis_from_m2bisbisr1a_and_m2bisbisr0bc init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property a : Byte
				property r0 : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2bisbisr1a
					action do
						r1 = ev.r1
						a = ev.a
					end
					transition -> S3
					event ev : app?m2bisbisr0bc
					action do
						r0 = ev.r0
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bisbisr0bc
					action do
						r0 = ev.r0
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2bisbisr1a
					action do
						r1 = ev.r1
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2bisbis(r1, a, r0, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1bisbis_from_m1bisbisabcd_and_m1bisbise init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m1bisbisabcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
					transition -> S3
					event ev : app?m1bisbise
					action do
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1bisbise
					action do
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m1bisbisabcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1bisbis(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
		region generate_m1abcd_from_m1abcdab_and_m1abcdcd init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1abcdab
					action do
						a = ev.a
						b = ev.b
					end
					transition -> S3
					event ev : app?m1abcdcd
					action do
						c = ev.c
						d = ev.d
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1abcdcd
					action do
						c = ev.c
						d = ev.d
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1abcdab
					action do
						a = ev.a
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1abcd(rnd(), a, b, c, d)
					end
					transition -> S1
				}
			}
		}
		region generate_m2ar0bc_from_m2ar0bca_and_m2ar0bcr0bc init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r0 : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2ar0bca
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m2ar0bcr0bc
					action do
						r0 = ev.r0
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2ar0bcr0bc
					action do
						r0 = ev.r0
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2ar0bca
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2ar0bc(rnd(), a, r0, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2bisr1ar0_from_m2bisr1ar0r1a_and_m2bisr1ar0r0 init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property a : Byte
				property r0 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2bisr1ar0r1a
					action do
						r1 = ev.r1
						a = ev.a
					end
					transition -> S3
					event ev : app?m2bisr1ar0r0
					action do
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bisr1ar0r0
					action do
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2bisr1ar0r1a
					action do
						r1 = ev.r1
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2bisr1ar0(rnd(), r1, rnd(), a, r0)
					end
					transition -> S1
				}
			}
		}
		region generate_m2bisbc_from_m2bisbcb_and_m2bisbcc init INIT {
			composite state INIT init S1 {
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2bisbcb
					action do
						b = ev.b
					end
					transition -> S3
					event ev : app?m2bisbcc
					action do
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bisbcc
					action do
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2bisbcb
					action do
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2bisbc(rnd(), b, rnd(), rnd(), c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1bisabc_from_m1bisabca_and_m1bisabcbc init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1bisabca
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m1bisabcbc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1bisabcbc
					action do
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1bisabca
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1bisabc(rnd(), a, b, rnd(), c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2bisbisr1a_from_m2bisbisr1ar1_and_m2bisbisr1aa init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2bisbisr1ar1
					action do
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m2bisbisr1aa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bisbisr1aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2bisbisr1ar1
					action do
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2bisbisr1a(rnd(), rnd(), rnd(), r1, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m1bisbisabcd_from_m1bisbisabcda_and_m1bisbisabcdbcd init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1bisbisabcda
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m1bisbisabcdbcd
					action do
						b = ev.b
						c = ev.c
						d = ev.d
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1bisbisabcdbcd
					action do
						b = ev.b
						c = ev.c
						d = ev.d
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1bisbisabcda
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1bisbisabcd(a, b, rnd(), c, d)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1e sends m2r1 sends m1bisde sends m2bisbisr0bc sends m1bisbise sends m1abcdab sends m1abcdcd sends m2ar0bca sends m2ar0bcr0bc sends m2bisr1ar0r1a sends m2bisr1ar0r0 sends m2bisbcb sends m2bisbcc sends m1bisabca sends m1bisabcbc sends m2bisbisr1ar1 sends m2bisbisr1aa sends m1bisbisabcda sends m1bisbisabcdbcd receives m3bisr5 receives m3r5r2r5 receives m3r5r2r2 receives m3r3r4ar3r4 receives m3r3r4aa receives m3bisr2r3r4ar2r3 receives m3bisr2r3r4ar4a receives m3bisbisr5r2r3r5 receives m3bisbisr5r2r3r2r3 receives m3bisbisr4ar4 receives m3bisbisr4aa
	}
	internal port diversified {
		sends m3 sends m3bisr5 sends m3bis sends m3bisbis sends m3r5r2r5 sends m3r5r2r2 sends m3r5r2 sends m3r3r4ar3r4 sends m3r3r4aa sends m3r3r4a sends m3bisr2r3r4ar2r3 sends m3bisr2r3r4ar4a sends m3bisr2r3r4a sends m3bisbisr5r2r3r5 sends m3bisbisr5r2r3r2r3 sends m3bisbisr5r2r3 sends m3bisbisr4ar4 sends m3bisbisr4aa sends m3bisbisr4a receives m3 receives m3bisr5 receives m3bis receives m3bisbis receives m3r5r2r5 receives m3r5r2r2 receives m3r5r2 receives m3r3r4ar3r4 receives m3r3r4aa receives m3r3r4a receives m3bisr2r3r4ar2r3 receives m3bisr2r3r4ar4a receives m3bisr2r3r4a receives m3bisbisr5r2r3r5 receives m3bisbisr5r2r3r2r3 receives m3bisbisr5r2r3 receives m3bisbisr4ar4 receives m3bisbisr4aa receives m3bisbisr4a
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				if (rnd()< 73) do
					do
						do
							do
								println "37" , ", " , rnd(), ", " , rnd(), ", " , _a , ", " , rnd(), ", " , _b , ", "
								app!m1abcdab(rnd(), rnd(), _a, rnd(), _b)
							end
							do
								println "38" , ", " , _c , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _d , ", "
								app!m1abcdcd(_c, rnd(), rnd(), rnd(), _d)
							end
						end
						do
							println "16" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", "
							app!m1e(rnd(), rnd(), rnd(), rnd(), _e)
						end
					end
				end
				else do
					if (rnd()< 118) do
						do
							do
								do
									println "45" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", "
									app!m1bisabca(rnd(), rnd(), rnd(), rnd(), _a)
								end
								do
									println "46" , ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", " , _c , ", "
									app!m1bisabcbc(rnd(), _b, rnd(), rnd(), _c)
								end
							end
							do
								println "22" , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , rnd(), ", " , _e , ", "
								app!m1bisde(rnd(), rnd(), _d, rnd(), _e)
							end
						end
					end
					else do
						do
							do
								do
									println "49" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", "
									app!m1bisbisabcda(rnd(), rnd(), rnd(), rnd(), _a)
								end
								do
									println "50" , ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _c , ", " , _d , ", "
									app!m1bisbisabcdbcd(rnd(), rnd(), _b, _c, _d)
								end
							end
							do
								println "26" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", "
								app!m1bisbise(rnd(), rnd(), rnd(), rnd(), _e)
							end
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				if (rnd()< 191) do
					do
						do
							println "17" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r1(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							do
								println "39" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", "
								app!m2ar0bca(rnd(), rnd(), rnd(), rnd(), _a)
							end
							do
								println "40" , ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", " , _c , ", "
								app!m2ar0bcr0bc(rnd(), _b, rnd(), rnd(), _c)
							end
						end
					end
				end
				else do
					if (rnd()< 139) do
						do
							do
								do
									println "41" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", "
									app!m2bisr1ar0r1a(rnd(), rnd(), rnd(), rnd(), _a)
								end
								do
									println "42" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m2bisr1ar0r0(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
							do
								do
									println "43" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", "
									app!m2bisbcb(rnd(), rnd(), rnd(), rnd(), _b)
								end
								do
									println "44" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", "
									app!m2bisbcc(rnd(), rnd(), rnd(), rnd(), _c)
								end
							end
						end
					end
					else do
						do
							do
								do
									println "47" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m2bisbisr1ar1(rnd(), rnd(), rnd(), rnd(), rnd())
								end
								do
									println "48" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", "
									app!m2bisbisr1aa(rnd(), rnd(), rnd(), rnd(), _a)
								end
							end
							do
								println "24" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _c , ", "
								app!m2bisbisr0bc(rnd(), rnd(), rnd(), _b, _c)
							end
						end
					end
				end
				counter ++
			end
			//transition -> STOP guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
				println "#CLI: Counter = ", counter
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
			transition -> RUN
			event e : diversified?m3bis
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3bis
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
			transition -> RUN
			event e : diversified?m3bisbis
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3bisbis
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r5r2_and_m3r3r4a init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r2 : Byte
				property r3 : Byte
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3r5r2
					action do
						r5 = ev.r5
						r2 = ev.r2
					end
					transition -> S3
					event ev : diversified?m3r3r4a
					action do
						r3 = ev.r3
						r4 = ev.r4
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r3r4a
					action do
						r3 = ev.r3
						r4 = ev.r4
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r5r2
					action do
						r5 = ev.r5
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r5, r2, r3, r4, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bis_from_m3bisr5_and_m3bisr2r3r4a init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r2 : Byte
				property r3 : Byte
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3bisr5
					action do
						r5 = ev.r5
					end
					transition -> S3
					event ev : diversified?m3bisr2r3r4a
					action do
						r2 = ev.r2
						r3 = ev.r3
						r4 = ev.r4
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3bisr2r3r4a
					action do
						r2 = ev.r2
						r3 = ev.r3
						r4 = ev.r4
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3bisr5
					action do
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bis(r5, r2, r3, r4, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bisbis_from_m3bisbisr5r2r3_and_m3bisbisr4a init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r2 : Byte
				property r3 : Byte
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3bisbisr5r2r3
					action do
						r5 = ev.r5
						r2 = ev.r2
						r3 = ev.r3
					end
					transition -> S3
					event ev : diversified?m3bisbisr4a
					action do
						r4 = ev.r4
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3bisbisr4a
					action do
						r4 = ev.r4
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3bisbisr5r2r3
					action do
						r5 = ev.r5
						r2 = ev.r2
						r3 = ev.r3
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bisbis(r5, r2, r3, r4, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r5r2_from_m3r5r2r5_and_m3r5r2r2 init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r2 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r5r2r5
					action do
						r5 = ev.r5
					end
					transition -> S3
					event ev : app?m3r5r2r2
					action do
						r2 = ev.r2
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r5r2r2
					action do
						r2 = ev.r2
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r5r2r5
					action do
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r5r2(r5, rnd(), rnd(), rnd(), r2)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r3r4a_from_m3r3r4ar3r4_and_m3r3r4aa init INIT {
			composite state INIT init S1 {
				property r3 : Byte
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r3r4ar3r4
					action do
						r3 = ev.r3
						r4 = ev.r4
					end
					transition -> S3
					event ev : app?m3r3r4aa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r3r4aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r3r4ar3r4
					action do
						r3 = ev.r3
						r4 = ev.r4
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r3r4a(r3, rnd(), r4, rnd(), a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bisr2r3r4a_from_m3bisr2r3r4ar2r3_and_m3bisr2r3r4ar4a init INIT {
			composite state INIT init S1 {
				property r2 : Byte
				property r3 : Byte
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3bisr2r3r4ar2r3
					action do
						r2 = ev.r2
						r3 = ev.r3
					end
					transition -> S3
					event ev : app?m3bisr2r3r4ar4a
					action do
						r4 = ev.r4
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3bisr2r3r4ar4a
					action do
						r4 = ev.r4
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3bisr2r3r4ar2r3
					action do
						r2 = ev.r2
						r3 = ev.r3
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bisr2r3r4a(r2, r3, r4, rnd(), a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bisbisr5r2r3_from_m3bisbisr5r2r3r5_and_m3bisbisr5r2r3r2r3 init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r2 : Byte
				property r3 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3bisbisr5r2r3r5
					action do
						r5 = ev.r5
					end
					transition -> S3
					event ev : app?m3bisbisr5r2r3r2r3
					action do
						r2 = ev.r2
						r3 = ev.r3
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3bisbisr5r2r3r2r3
					action do
						r2 = ev.r2
						r3 = ev.r3
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3bisbisr5r2r3r5
					action do
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bisbisr5r2r3(rnd(), r5, rnd(), r2, r3)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bisbisr4a_from_m3bisbisr4ar4_and_m3bisbisr4aa init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3bisbisr4ar4
					action do
						r4 = ev.r4
					end
					transition -> S3
					event ev : app?m3bisbisr4aa
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3bisbisr4aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3bisbisr4ar4
					action do
						r4 = ev.r4
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bisbisr4a(rnd(), rnd(), rnd(), r4, a)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
