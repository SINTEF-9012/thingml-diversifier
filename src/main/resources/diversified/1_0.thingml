datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m2(r0 : Byte, a : Byte@upsize "not", r3 : Byte, c : Integer, b : Byte@upsize "not")
	@code "0xA4"
	message m1(c : Integer, e : Byte, r4 : Byte, b : Byte@upsize "not", d : Byte, a : Byte@upsize "not", r1 : Byte)
	@code "0xA5"
	message m3(r2 : Integer, r5 : Byte, a : Byte)
	@code "0xA6"
	message m3r2(r6 : Byte, r2 : Integer)
	@code "0xA7"
	message m3a(a : Byte, r7 : Byte)
	@code "0xA8"
	message m2b(b : Byte @upsize "not", r8 : Byte)
	@code "0xA9"
	message m2acr0(a : Byte @upsize "not", c : Integer, r0 : Byte, r9 : Byte)
	@code "0xAA"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3r2
	sends m3a receives m1 receives m2b
		receives m2acr0
	}
	internal port diversified {
		sends m2 receives m2
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : app?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "-89" , ", " , rnd(), ", " , rnd(), ", "
						app!m3r2(rnd(), rnd())
					end
					do
						println "-88" , ", " , id , ", " , rnd(), ", "
						app!m3a(id, rnd())
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m2_from_m2b_and_m2acr0 init INIT {
			composite state INIT init S1 {
				property b : Byte
				property a : Byte
				property c : Integer
				property r0 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2b
					action do
						b = ev.b
					end
					transition -> S3
					event ev : app?m2acr0
					action do
						a = ev.a
						c = ev.c
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2acr0
					action do
						a = ev.a
						c = ev.c
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2b
					action do
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r0, a, rnd(), c, b)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1 sends m2b
		sends m2acr0 receives m3r2
	receives m3a
	}
	internal port diversified {
		sends m3 receives m3
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					println "-91" , ", " , _c , ", " , _e , ", " , rnd(), ", " , _b , ", " , _d , ", " , _a , ", " , rnd(), ", "
					app!m1(_c, _e, rnd(), _b, _d, _a, rnd())
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						println "-87" , ", " , _b , ", " , rnd(), ", "
						app!m2b(_b, rnd())
					end
					do
						println "-86" , ", " , _a , ", " , _c , ", " , rnd(), ", " , rnd(), ", "
						app!m2acr0(_a, _c, rnd(), rnd())
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r2_and_m3a init INIT {
			composite state INIT init S1 {
				property r2 : Integer
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r2
					action do
						r2 = ev.r2
					end
					transition -> S3
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r2
					action do
						r2 = ev.r2
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r2, rnd(), a)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
