datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m3(r0 : Integer, r28 : Byte, r47 : Byte, r6 : Byte, a : Integer, r3 : Byte, r9 : Byte)
	@code "0x10"
	message m1(r29 : Byte, r5 : Byte, r10 : Byte, a : Byte@upsize "not", d : Integer, r7 : Byte, r1 : Byte, r48 : Byte, c : Byte, e : Byte, b : Byte@upsize "not")
	@code "0x11"
	message m2(r4 : Integer, a : Byte@upsize "not", r11 : Byte, c : Byte, r30 : Byte, r8 : Byte, b : Byte@upsize "not", r2 : Byte, r49 : Byte)
	@code "0x12"
	message m3a(r31 : Byte, a : Integer, r50 : Byte, r12 : Byte)
	@code "0x13"
	message m3r6r0r3(r51 : Byte, r32 : Byte, r13 : Byte, r0 : Integer, r3 : Byte, r6 : Byte)
	@code "0x14"
	message m1r5(r33 : Byte, r14 : Byte, r5 : Byte, r52 : Byte)
	@code "0x15"
	message m1er1r7cadb(r1 : Byte, c : Byte, r53 : Byte, r15 : Byte, e : Byte, d : Integer, r7 : Byte, r34 : Byte, b : Byte @upsize "not", a : Byte @upsize "not")
	@code "0x16"
	message m2ar8(r8 : Byte, r16 : Byte, r54 : Byte, r35 : Byte, a : Byte @upsize "not")
	@code "0x17"
	message m2r4br2c(r4 : Integer, r17 : Byte, b : Byte @upsize "not", r36 : Byte, c : Byte, r55 : Byte, r2 : Byte)
	@code "0x18"
	message m3r6r0r3r6r0(r0 : Integer, r6 : Byte, r37 : Byte, r18 : Byte, r56 : Byte)
	@code "0x19"
	message m3r6r0r3r3(r57 : Byte, r3 : Byte, r38 : Byte, r19 : Byte)
	@code "0x1A"
	message m3r6r0r3r6r0r6(r6 : Byte, r39 : Byte, r20 : Byte, r58 : Byte)
	@code "0x1B"
	message m3r6r0r3r6r0r0(r0 : Integer, r40 : Byte, r21 : Byte, r59 : Byte)
	@code "0x1C"
	message m1er1r7cadber1r7ca(r22 : Byte, r60 : Byte, e : Byte, r7 : Byte, r41 : Byte, a : Byte @upsize "not", r1 : Byte, c : Byte)
	@code "0x1D"
	message m1er1r7cadbdb(r23 : Byte, r42 : Byte, d : Integer, b : Byte @upsize "not", r61 : Byte)
	@code "0x1E"
	message m2ar8a(r43 : Byte, a : Byte @upsize "not", r62 : Byte, r24 : Byte)
	@code "0x1F"
	message m2ar8r8(r44 : Byte, r8 : Byte, r63 : Byte, r25 : Byte)
	@code "0x20"
	message m2r4br2cr4(r64 : Byte, r4 : Integer, r26 : Byte, r45 : Byte)
	@code "0x21"
	message m2r4br2cbr2c(r65 : Byte, c : Byte, r46 : Byte, b : Byte @upsize "not", r2 : Byte, r27 : Byte)
	@code "0x22"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3a
	sends m3r6r0r3r3 sends m3r6r0r3r6r0r6 sends m3r6r0r3r6r0r0 receives m1r5 receives m1er1r7cadber1r7ca
		receives m1er1r7cadbdb receives m2ar8a receives m2ar8r8 receives m2r4br2cr4 receives m2r4br2cbr2c
	}
	internal port diversified {
		sends m1 sends m2 sends m1er1r7cadber1r7ca sends m1er1r7cadbdb sends m1er1r7cadb sends m2ar8a sends m2ar8r8 sends m2ar8 sends m2r4br2cr4 sends m2r4br2cbr2c sends m2r4br2c receives m1 receives m2 receives m1er1r7cadber1r7ca receives m1er1r7cadbdb receives m1er1r7cadb receives m2ar8a receives m2ar8r8 receives m2ar8 receives m2r4br2cr4 receives m2r4br2cbr2c receives m2r4br2c
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "19" , ", " , rnd(), ", " , id , ", " , rnd(), ", " , rnd(), ", "
						app!m3a(rnd(), id, rnd(), rnd())
					end
					do
						do
							do
								println "27" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r6r0r3r6r0r6(rnd(), rnd(), rnd(), rnd())
							end
							do
								println "28" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r6r0r3r6r0r0(rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							println "26" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3r6r0r3r3(rnd(), rnd(), rnd(), rnd())
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1r5_and_m1er1r7cadb init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property e : Byte
				property r1 : Byte
				property r7 : Byte
				property c : Byte
				property a : Byte
				property d : Integer
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1r5
					action do
						r5 = ev.r5
					end
					transition -> S3
					event ev : diversified?m1er1r7cadb
					action do
						e = ev.e
						r1 = ev.r1
						r7 = ev.r7
						c = ev.c
						a = ev.a
						d = ev.d
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m1er1r7cadb
					action do
						e = ev.e
						r1 = ev.r1
						r7 = ev.r7
						c = ev.c
						a = ev.a
						d = ev.d
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1r5
					action do
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(rnd(), r5, rnd(), a, d, r7, r1, rnd(), c, e, b)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2ar8_and_m2r4br2c init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r8 : Byte
				property r4 : Integer
				property b : Byte
				property r2 : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m2ar8
					action do
						a = ev.a
						r8 = ev.r8
					end
					transition -> S3
					event ev : diversified?m2r4br2c
					action do
						r4 = ev.r4
						b = ev.b
						r2 = ev.r2
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r4br2c
					action do
						r4 = ev.r4
						b = ev.b
						r2 = ev.r2
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m2ar8
					action do
						a = ev.a
						r8 = ev.r8
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r4, a, rnd(), c, rnd(), r8, b, r2, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m1er1r7cadb_from_m1er1r7cadber1r7ca_and_m1er1r7cadbdb init INIT {
			composite state INIT init S1 {
				property e : Byte
				property r1 : Byte
				property r7 : Byte
				property c : Byte
				property a : Byte
				property d : Integer
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1er1r7cadber1r7ca
					action do
						e = ev.e
						r1 = ev.r1
						r7 = ev.r7
						c = ev.c
						a = ev.a
					end
					transition -> S3
					event ev : app?m1er1r7cadbdb
					action do
						d = ev.d
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1er1r7cadbdb
					action do
						d = ev.d
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1er1r7cadber1r7ca
					action do
						e = ev.e
						r1 = ev.r1
						r7 = ev.r7
						c = ev.c
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1er1r7cadb(r1, c, rnd(), rnd(), e, d, r7, rnd(), b, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m2ar8_from_m2ar8a_and_m2ar8r8 init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r8 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2ar8a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m2ar8r8
					action do
						r8 = ev.r8
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2ar8r8
					action do
						r8 = ev.r8
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2ar8a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2ar8(r8, rnd(), rnd(), rnd(), a)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r4br2c_from_m2r4br2cr4_and_m2r4br2cbr2c init INIT {
			composite state INIT init S1 {
				property r4 : Integer
				property b : Byte
				property r2 : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r4br2cr4
					action do
						r4 = ev.r4
					end
					transition -> S3
					event ev : app?m2r4br2cbr2c
					action do
						b = ev.b
						r2 = ev.r2
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r4br2cbr2c
					action do
						b = ev.b
						r2 = ev.r2
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r4br2cr4
					action do
						r4 = ev.r4
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r4br2c(r4, rnd(), b, rnd(), c, rnd(), r2)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1r5 sends m1er1r7cadber1r7ca
		sends m1er1r7cadbdb sends m2ar8a sends m2ar8r8 sends m2r4br2cr4 sends m2r4br2cbr2c receives m3a
	receives m3r6r0r3r3 receives m3r6r0r3r6r0r6 receives m3r6r0r3r6r0r0
	}
	internal port diversified {
		sends m3 sends m3r6r0r3r3 sends m3r6r0r3 sends m3r6r0r3r6r0r6 sends m3r6r0r3r6r0r0 sends m3r6r0r3r6r0 receives m3 receives m3r6r0r3r3 receives m3r6r0r3 receives m3r6r0r3r6r0r6 receives m3r6r0r3r6r0r0 receives m3r6r0r3r6r0
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						println "21" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m1r5(rnd(), rnd(), rnd(), rnd())
					end
					do
						do
							println "29" , ", " , rnd(), ", " , rnd(), ", " , _e , ", " , rnd(), ", " , rnd(), ", " , _a , ", " , rnd(), ", " , _c , ", "
							app!m1er1r7cadber1r7ca(rnd(), rnd(), _e, rnd(), rnd(), _a, rnd(), _c)
						end
						do
							println "30" , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , _b , ", " , rnd(), ", "
							app!m1er1r7cadbdb(rnd(), rnd(), _d, _b, rnd())
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						do
							println "31" , ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", "
							app!m2ar8a(rnd(), _a, rnd(), rnd())
						end
						do
							println "32" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2ar8r8(rnd(), rnd(), rnd(), rnd())
						end
					end
					do
						do
							println "33" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r4br2cr4(rnd(), rnd(), rnd(), rnd())
						end
						do
							println "34" , ", " , rnd(), ", " , _c , ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", "
							app!m2r4br2cbr2c(rnd(), _c, rnd(), _b, rnd(), rnd())
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3a_and_m3r6r0r3 init INIT {
			composite state INIT init S1 {
				property a : Integer
				property r6 : Byte
				property r0 : Integer
				property r3 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : diversified?m3r6r0r3
					action do
						r6 = ev.r6
						r0 = ev.r0
						r3 = ev.r3
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r6r0r3
					action do
						r6 = ev.r6
						r0 = ev.r0
						r3 = ev.r3
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r0, rnd(), rnd(), r6, a, r3, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r6r0r3_from_m3r6r0r3r6r0_and_m3r6r0r3r3 init INIT {
			composite state INIT init S1 {
				property r6 : Byte
				property r0 : Integer
				property r3 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3r6r0r3r6r0
					action do
						r6 = ev.r6
						r0 = ev.r0
					end
					transition -> S3
					event ev : app?m3r6r0r3r3
					action do
						r3 = ev.r3
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r6r0r3r3
					action do
						r3 = ev.r3
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r6r0r3r6r0
					action do
						r6 = ev.r6
						r0 = ev.r0
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r6r0r3(rnd(), rnd(), rnd(), r0, r3, r6)
					end
					transition -> S1
				}
			}
		}
		region generate_m3r6r0r3r6r0_from_m3r6r0r3r6r0r6_and_m3r6r0r3r6r0r0 init INIT {
			composite state INIT init S1 {
				property r6 : Byte
				property r0 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r6r0r3r6r0r6
					action do
						r6 = ev.r6
					end
					transition -> S3
					event ev : app?m3r6r0r3r6r0r0
					action do
						r0 = ev.r0
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r6r0r3r6r0r0
					action do
						r0 = ev.r0
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r6r0r3r6r0r6
					action do
						r6 = ev.r6
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r6r0r3r6r0(r0, r6, rnd(), rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
