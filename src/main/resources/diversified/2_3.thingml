datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m3(r2 : Byte, a : Integer, r3 : Byte, r17 : Byte, r6 : Byte)
	@code "0x3D"
	message m1(b : Byte@upsize "not", e : Integer, r1 : Byte, r18 : Byte, d : Byte, c : Byte, r7 : Byte, a : Byte@upsize "not", r4 : Byte)
	@code "0x3E"
	message m2(r8 : Byte, b : Byte@upsize "not", r0 : Integer, r5 : Byte, a : Byte@upsize "not", r19 : Byte, c : Byte)
	@code "0x3F"
	message m1r4cebda(d : Byte, a : Byte @upsize "not", c : Byte, b : Byte @upsize "not", r4 : Byte, e : Integer, r9 : Byte, r20 : Byte)
	@code "0x40"
	message m1r1(r1 : Byte, r21 : Byte, r10 : Byte)
	@code "0x41"
	message m2c(r11 : Byte, r22 : Byte, c : Byte)
	@code "0x42"
	message m2r5r0ab(r12 : Byte, b : Byte @upsize "not", r5 : Byte, a : Byte @upsize "not", r0 : Integer, r23 : Byte)
	@code "0x43"
	message m3a(r24 : Byte, r13 : Byte, a : Integer)
	@code "0x44"
	message m3r2r3(r2 : Byte, r3 : Byte, r14 : Byte, r25 : Byte)
	@code "0x45"
	message m2r5r0abr5r0a(r26 : Byte, r0 : Integer, a : Byte @upsize "not", r15 : Byte, r5 : Byte)
	@code "0x46"
	message m2r5r0abb(r16 : Byte, r27 : Byte, b : Byte @upsize "not")
	@code "0x47"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3a
	sends m3r2r3 receives m1r4cebda receives m1r1
		receives m2c receives m2r5r0abr5r0a receives m2r5r0abb
	}
	internal port diversified {
		sends m1 sends m2c sends m2 sends m2r5r0abr5r0a sends m2r5r0abb sends m2r5r0ab receives m1 receives m2c receives m2 receives m2r5r0abr5r0a receives m2r5r0abb receives m2r5r0ab
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "68" , ", " , rnd(), ", " , rnd(), ", " , id , ", "
						app!m3a(rnd(), rnd(), id)
					end
					do
						println "69" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m3r2r3(rnd(), rnd(), rnd(), rnd())
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1r4cebda_and_m1r1 init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property c : Byte
				property e : Integer
				property b : Byte
				property d : Byte
				property a : Byte
				property r1 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1r4cebda
					action do
						r4 = ev.r4
						c = ev.c
						e = ev.e
						b = ev.b
						d = ev.d
						a = ev.a
					end
					transition -> S3
					event ev : app?m1r1
					action do
						r1 = ev.r1
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1r1
					action do
						r1 = ev.r1
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1r4cebda
					action do
						r4 = ev.r4
						c = ev.c
						e = ev.e
						b = ev.b
						d = ev.d
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(b, e, r1, rnd(), d, c, rnd(), a, r4)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2c_and_m2r5r0ab init INIT {
			composite state INIT init S1 {
				property c : Byte
				property r5 : Byte
				property r0 : Integer
				property a : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2c
					action do
						c = ev.c
					end
					transition -> S3
					event ev : diversified?m2r5r0ab
					action do
						r5 = ev.r5
						r0 = ev.r0
						a = ev.a
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m2r5r0ab
					action do
						r5 = ev.r5
						r0 = ev.r0
						a = ev.a
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2c
					action do
						c = ev.c
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(rnd(), b, r0, r5, a, rnd(), c)
					end
					transition -> S1
				}
			}
		}
		region generate_m2r5r0ab_from_m2r5r0abr5r0a_and_m2r5r0abb init INIT {
			composite state INIT init S1 {
				property r5 : Byte
				property r0 : Integer
				property a : Byte
				property b : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r5r0abr5r0a
					action do
						r5 = ev.r5
						r0 = ev.r0
						a = ev.a
					end
					transition -> S3
					event ev : app?m2r5r0abb
					action do
						b = ev.b
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2r5r0abb
					action do
						b = ev.b
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r5r0abr5r0a
					action do
						r5 = ev.r5
						r0 = ev.r0
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2r5r0ab(rnd(), b, r5, a, r0, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1r4cebda sends m1r1
		sends m2c sends m2r5r0abr5r0a sends m2r5r0abb receives m3a
	receives m3r2r3
	}
	internal port diversified {
		sends m3 receives m3
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						println "64" , ", " , _d , ", " , _a , ", " , _c , ", " , _b , ", " , rnd(), ", " , _e , ", " , rnd(), ", " , rnd(), ", "
						app!m1r4cebda(_d, _a, _c, _b, rnd(), _e, rnd(), rnd())
					end
					do
						println "65" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m1r1(rnd(), rnd(), rnd())
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						println "66" , ", " , rnd(), ", " , rnd(), ", " , _c , ", "
						app!m2c(rnd(), rnd(), _c)
					end
					do
						do
							println "70" , ", " , rnd(), ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", "
							app!m2r5r0abr5r0a(rnd(), rnd(), _a, rnd(), rnd())
						end
						do
							println "71" , ", " , rnd(), ", " , rnd(), ", " , _b , ", "
							app!m2r5r0abb(rnd(), rnd(), _b)
						end
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3a_and_m3r2r3 init INIT {
			composite state INIT init S1 {
				property a : Integer
				property r2 : Byte
				property r3 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m3r2r3
					action do
						r2 = ev.r2
						r3 = ev.r3
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r2r3
					action do
						r2 = ev.r2
						r3 = ev.r3
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r2, a, r3, rnd(), rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
