datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
datatype Long<4>
	@type_checker "Integer"
	@java_type "int"
datatype LongLong<8>
	@type_checker "Integer"
	@java_type "long"
thing fragment Msgs {
	message m1(a : Byte @upsize "not", d : Long @weakparam "true", c : LongLong, b : Byte @upsize "not", e : Long)
	@code "0x48"
	message m3(a : Byte)
	@code "0x49"
	message m2(b : Byte @upsize "not", a : Byte @upsize "not", c : Byte)
	@code "0x4A"
	message m1adcb(a : Byte @upsize "not", d : Long @weakparam "true", c : LongLong, b : Byte @upsize "not")
	@code "0x4B"
	message m1e(e : Long)
	@code "0x4C"
	message m3_()
	@code "0x4D"
	message m3a(a : Byte)
	@code "0x4E"
	message m2_()
	@code "0x4F"
	message m2bac(b : Byte @upsize "not", a : Byte @upsize "not", c : Byte)
	@code "0x50"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3_ sends m3a receives m1adcb receives m1e receives m2_ receives m2bac
	}
	internal port diversified {
		sends m1 sends m2_ sends m2bac sends m2 receives m1 receives m2_ receives m2bac receives m2
	}
	property id : Byte
	statechart init WaitForM1 {
		on entry `
			var fs = require('fs');
			process.writeable = fs.createWriteStream('out.log');
			process.stdout.write = process.stderr.write = process.writeable.write.bind(process.writeable);
		`
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "!" , "77" , ','
						println ":" , "Byte" , ','
						println "?" , "0" , ','
						app!m3_()
					end
					do
						var m3aArg0 : Byte = id
						println "!" , "78" , ',' , `((` & m3aArg0 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ','
						println "?" , "0" , ',' , "0" , ','
						app!m3a(m3aArg0)
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1adcb_and_m1e init INIT {
			composite state INIT init S1 {
				property a : Byte
				property d : Long
				property c : LongLong
				property b : Byte
				property e : Long
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1adcb
					action do
						a = ev.a
						d = ev.d
						c = ev.c
						b = ev.b
					end
					transition -> S3
					event ev : app?m1e
					action do
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1e
					action do
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1adcb
					action do
						a = ev.a
						d = ev.d
						c = ev.c
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(a, d, c, b, e)
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2__and_m2bac init INIT {
			composite state INIT init S1 {
				property b : Byte
				property a : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2_
					action do
					end
					transition -> S3
					event ev : app?m2bac
					action do
						b = ev.b
						a = ev.a
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bac
					action do
						b = ev.b
						a = ev.a
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2_
					action do
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(b, a, c)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1adcb sends m1e sends m2_ sends m2bac receives m3_ receives m3a
	}
	internal port diversified {
		sends m3 receives m3
	}
	property counter : Integer = 0
	property start : Integer
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = 0x02
			start = `new Date()`
		end
		state RUN {
			on entry do
				_c = rnd()% 20
				_d = rnd()% 10 + 20
				_e = rnd()% 5 + 10
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						var m1adcbArg0 : Byte = _a
						var m1adcbArg1 : Long = _d
						var m1adcbArg2 : LongLong = _c
						var m1adcbArg3 : Byte = _b
						println "!" , "75" , ',' , `((` & m1adcbArg0 & ` >> 0) & 0xFF)` , ',' , `((` & m1adcbArg1 & ` >> 24) & 0xFF)` , ',' , `((` & m1adcbArg1 & ` >> 16) & 0xFF)` , ',' , `((` & m1adcbArg1 & ` >> 8) & 0xFF)` , ',' , `((` & m1adcbArg1 & ` >> 0) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 56) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 48) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 40) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 32) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 24) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 16) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 8) & 0xFF)` , ',' , `((` & m1adcbArg2 & ` >> 0) & 0xFF)` , ',' , `((` & m1adcbArg3 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ',' , "Long" , ',' , "Long" , ',' , "Long" , ',' , "Long" , ',' , "LongLong" , ',' , "LongLong" , ',' , "LongLong" , ',' , "LongLong" , ',' , "LongLong" , ',' , "LongLong" , ',' , "LongLong" , ',' , "LongLong" , ',' , "Byte" , ','
						println "?" , "0" , ',' , "0" , ',' , "1" , ',' , "1" , ',' , "1" , ',' , "1" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ','
						app!m1adcb(m1adcbArg0, m1adcbArg1, m1adcbArg2, m1adcbArg3)
					end
					do
						var m1eArg0 : Long = _e
						println "!" , "76" , ',' , `((` & m1eArg0 & ` >> 24) & 0xFF)` , ',' , `((` & m1eArg0 & ` >> 16) & 0xFF)` , ',' , `((` & m1eArg0 & ` >> 8) & 0xFF)` , ',' , `((` & m1eArg0 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Long" , ',' , "Long" , ',' , "Long" , ',' , "Long" , ','
						println "?" , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ','
						app!m1e(m1eArg0)
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						var m2bacArg0 : Byte = _b
						var m2bacArg1 : Byte = _a
						var m2bacArg2 : Byte = _c
						println "!" , "80" , ',' , `((` & m2bacArg0 & ` >> 0) & 0xFF)` , ',' , `((` & m2bacArg1 & ` >> 0) & 0xFF)` , ',' , `((` & m2bacArg2 & ` >> 0) & 0xFF)` , ','
						println ":" , "Byte" , ',' , "Byte" , ',' , "Byte" , ',' , "Byte" , ','
						println "?" , "0" , ',' , "0" , ',' , "0" , ',' , "0" , ','
						app!m2bac(m2bacArg0, m2bacArg1, m2bacArg2)
					end
					do
						println "!" , "79" , ','
						println ":" , "Byte" , ','
						println "?" , "0" , ','
						app!m2_()
					end
				end
				counter ++
			end
			transition -> STOP
			event e : diversified?m3
			guard counter >= 5
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a and counter < 5
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry do
				println "#CLI: What are you waitin for? Christmas?"
				var duration : Integer = `new Date()` - start
				println "#CLI: took " , duration , "ms."
			`process.writeable.end(() => {
					process.exit(0);
				})`
			end
		}
		final state ERROR {
			on entry do
				println "#CLI: Heh, heh, heh... what a mess!"
			`process.exit(1);`
			end
		}
		region generate_m3_from_m3__and_m3a init INIT {
			composite state INIT init S1 {
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3_
					action do
					end
					transition -> S3
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3_
					action do
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(a)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
