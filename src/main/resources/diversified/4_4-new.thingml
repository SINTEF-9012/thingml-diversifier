datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m1(e : Byte, r79 : Byte, b : Byte@upsize "not", r21 : Byte, r7 : Byte, a : Byte@upsize "not", c : Byte, d : Byte, r37 : Byte, r14 : Byte, r8 : Byte, r57 : Byte, r2 : Byte)
	@code "0xE2"
	message m2bis(r9 : Byte, r15 : Byte, r0 : Byte, r38 : Byte, r80 : Byte, b : Byte @upsize "not", c : Byte, a : Byte @upsize "not", r58 : Byte, r6 : Byte, r22 : Byte)
	@code "0xE3"
	message m1bisbis(b : Byte @upsize "not", r23 : Byte, r81 : Byte, d : Byte, r16 : Byte, r39 : Byte, c : Byte, r4 : Byte, r2 : Byte, a : Byte @upsize "not", r10 : Byte, e : Byte, r59 : Byte)
	@code "0xE4"
	message m2(r17 : Byte, a : Byte@upsize "not", r82 : Byte, r60 : Byte, r24 : Byte, r0 : Byte, r12 : Byte, r40 : Byte, b : Byte@upsize "not", c : Byte, r3 : Byte)
	@code "0xE5"
	message m3(r1 : Byte, a : Byte, r25 : Byte, r83 : Byte, r41 : Byte, r61 : Byte, r18 : Byte, r11 : Byte, r5 : Byte)
	@code "0xE6"
	message m3bis(r42 : Byte, r5 : Byte, r62 : Byte, r84 : Byte, r1 : Byte, r13 : Byte, r19 : Byte, a : Byte, r26 : Byte)
	@code "0xE7"
	message m1bis(e : Byte, r43 : Byte, r85 : Byte, r63 : Byte, r27 : Byte, c : Byte, a : Byte @upsize "not", r2 : Byte, r20 : Byte, r10 : Byte, r4 : Byte, b : Byte @upsize "not", d : Byte)
	@code "0xE8"
	message m1bisbisbis(r4 : Byte, r28 : Byte, r86 : Byte, r64 : Byte, r16 : Byte, c : Byte, r2 : Byte, r10 : Byte, d : Byte, e : Byte, r44 : Byte, a : Byte @upsize "not", b : Byte @upsize "not")
	@code "0xE9"
	message m3r11r18r5(r11 : Byte, r65 : Byte, r18 : Byte, r5 : Byte, r87 : Byte, r29 : Byte, r45 : Byte)
	@code "0xEA"
	message m3r1a(r30 : Byte, r88 : Byte, a : Byte, r66 : Byte, r1 : Byte, r46 : Byte)
	@code "0xEB"
	message m3bisr1(r1 : Byte, r89 : Byte, r67 : Byte, r31 : Byte, r47 : Byte)
	@code "0xEC"
	message m3bisr19r5r13a(r19 : Byte, r5 : Byte, r90 : Byte, r68 : Byte, a : Byte, r48 : Byte, r32 : Byte, r13 : Byte)
	@code "0xED"
	message m3r11r18r5r11r18(r18 : Byte, r11 : Byte, r69 : Byte, r49 : Byte, r91 : Byte, r33 : Byte)
	@code "0xEE"
	message m3r11r18r5r5(r70 : Byte, r34 : Byte, r5 : Byte, r50 : Byte, r92 : Byte)
	@code "0xEF"
	message m3r1ar1(r51 : Byte, r71 : Byte, r1 : Byte, r93 : Byte, r35 : Byte)
	@code "0xF0"
	message m3r1aa(r52 : Byte, r94 : Byte, a : Byte, r72 : Byte, r36 : Byte)
	@code "0xF1"
	message m3r11r18r5bis(r18 : Byte, r73 : Byte, r11 : Byte, r95 : Byte, r53 : Byte, r29 : Byte, r5 : Byte)
	@code "0xF2"
	message m3bisr1bis(r54 : Byte, r96 : Byte, r31 : Byte, r74 : Byte, r1 : Byte)
	@code "0xF3"
	message m3r11r18r5r11r18bis(r55 : Byte, r11 : Byte, r75 : Byte, r33 : Byte, r97 : Byte, r18 : Byte)
	@code "0xF4"
	message m3r1ar1bis(r35 : Byte, r56 : Byte, r1 : Byte, r76 : Byte, r98 : Byte)
	@code "0xF5"
	message m3r11r18r5bisbis(r11 : Byte, r29 : Byte, r77 : Byte, r5 : Byte, r53 : Byte, r18 : Byte, r99 : Byte)
	@code "0xF6"
	message m3r11r18r5r11r18bisbis(r33 : Byte, r55 : Byte, r78 : Byte, r11 : Byte, r18 : Byte, r100 : Byte)
	@code "0xF7"
	message m3r11r18r5bisbisbis(r53 : Byte, r101 : Byte, r5 : Byte, r77 : Byte, r11 : Byte, r29 : Byte, r18 : Byte)
	@code "0xF8"
	message m3r11r18r5bisbisbisbis(r53 : Byte, r101 : Byte, r5 : Byte, r77 : Byte, r11 : Byte, r29 : Byte, r18 : Byte)
	@code "0xF9"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3bisr1
	sends m3bisr19r5r13a sends m3r11r18r5r11r18 sends m3r11r18r5r5 sends m3r1ar1 sends m3r1aa sends m3bisr1bis sends m3r11r18r5r11r18bis sends m3r1ar1bis sends m3r11r18r5r11r18bisbis receives m1 receives m2
		receives m2bis receives m1bis receives m1bisbis receives m1bisbisbis
	}
	internal port diversified {
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : app?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
			transition -> WaitForM2
			event e : app?m1bis
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
			transition -> WaitForM2
			event e : app?m1bisbis
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
			transition -> WaitForM2
			event e : app?m1bisbisbis
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : app?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
			transition -> SendAck
			event e : app?m2bis
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				if (rnd()< 58) do
					do
						do
							if (rnd()< 202) do
								do
									println "-18" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m3r11r18r5r11r18(rnd(), rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
							else do
								if (rnd()< 157) do
									do
										println "-12" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
										app!m3r11r18r5r11r18bis(rnd(), rnd(), rnd(), rnd(), rnd(), rnd())
									end
								end
								else do
									do
										println "-9" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
										app!m3r11r18r5r11r18bisbis(rnd(), rnd(), rnd(), rnd(), rnd(), rnd())
									end
								end
							end
							do
								println "-17" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3r11r18r5r5(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							if (rnd()< 172) do
								do
									println "-16" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m3r1ar1(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
							else do
								do
									println "-11" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
									app!m3r1ar1bis(rnd(), rnd(), rnd(), rnd(), rnd())
								end
							end
							do
								println "-15" , ", " , rnd(), ", " , rnd(), ", " , id , ", " , rnd(), ", " , rnd(), ", "
								app!m3r1aa(rnd(), rnd(), id, rnd(), rnd())
							end
						end
					end
				end
				else do
					do
						if (rnd()< 132) do
							do
								println "-20" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3bisr1(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
						else do
							do
								println "-13" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
								app!m3bisr1bis(rnd(), rnd(), rnd(), rnd(), rnd())
							end
						end
						do
							println "-19" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3bisr19r5r13a(rnd(), rnd(), rnd(), rnd(), id, rnd(), rnd(), rnd())
						end
					end
				end
			end
			transition -> WaitForM1
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1 sends m2
		sends m2bis sends m1bis sends m1bisbis sends m1bisbisbis receives m3bisr1
	receives m3bisr19r5r13a receives m3r11r18r5r11r18 receives m3r11r18r5r5 receives m3r1ar1 receives m3r1aa receives m3bisr1bis receives m3r11r18r5r11r18bis receives m3r1ar1bis receives m3r11r18r5r11r18bisbis
	}
	internal port diversified {
		sends m3 sends m3bisr1 sends m3bisr19r5r13a sends m3bis sends m3r11r18r5r11r18 sends m3r11r18r5r5 sends m3r11r18r5 sends m3r1ar1 sends m3r1aa sends m3r1a sends m3r11r18r5bis sends m3bisr1bis sends m3r11r18r5r11r18bis sends m3r1ar1bis sends m3r11r18r5bisbis sends m3r11r18r5r11r18bisbis sends m3r11r18r5bisbisbis sends m3r11r18r5bisbisbisbis receives m3 receives m3bisr1 receives m3bisr19r5r13a receives m3bis receives m3r11r18r5r11r18 receives m3r11r18r5r5 receives m3r11r18r5 receives m3r1ar1 receives m3r1aa receives m3r1a receives m3r11r18r5bis receives m3bisr1bis receives m3r11r18r5r11r18bis receives m3r1ar1bis receives m3r11r18r5bisbis receives m3r11r18r5r11r18bisbis receives m3r11r18r5bisbisbis receives m3r11r18r5bisbisbisbis
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				if (rnd()< 252) do
					do
						println "-30" , ", " , _e , ", " , rnd(), ", " , _b , ", " , rnd(), ", " , rnd(), ", " , _a , ", " , _c , ", " , _d , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m1(_e, rnd(), _b, rnd(), rnd(), _a, _c, _d, rnd(), rnd(), rnd(), rnd(), rnd())
					end
				end
				else do
					if (rnd()< 5) do
						do
							println "-24" , ", " , _e , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", " , _a , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _d , ", "
							app!m1bis(_e, rnd(), rnd(), rnd(), rnd(), _c, _a, rnd(), rnd(), rnd(), rnd(), _b, _d)
						end
					end
					else do
						if (rnd()< 183) do
							do
								println "-28" , ", " , _b , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , rnd(), ", " , rnd(), ", " , _c , ", " , rnd(), ", " , rnd(), ", " , _a , ", " , rnd(), ", " , _e , ", " , rnd(), ", "
								app!m1bisbis(_b, rnd(), rnd(), _d, rnd(), rnd(), _c, rnd(), rnd(), _a, rnd(), _e, rnd())
							end
						end
						else do
							do
								println "-23" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , _e , ", " , rnd(), ", " , _a , ", " , _b , ", "
								app!m1bisbisbis(rnd(), rnd(), rnd(), rnd(), rnd(), _c, rnd(), rnd(), _d, _e, rnd(), _a, _b)
							end
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				if (rnd()< 31) do
					do
						println "-27" , ", " , rnd(), ", " , _a , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _c , ", " , rnd(), ", "
						app!m2(rnd(), _a, rnd(), rnd(), rnd(), rnd(), rnd(), rnd(), _b, _c, rnd())
					end
				end
				else do
					do
						println "-29" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _b , ", " , _c , ", " , _a , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
						app!m2bis(rnd(), rnd(), rnd(), rnd(), rnd(), _b, _c, _a, rnd(), rnd(), rnd())
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
			transition -> RUN
			event e : diversified?m3bis
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3bis
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3r11r18r5_and_m3r1a init INIT {
			composite state INIT init S1 {
				property r11 : Byte
				property r18 : Byte
				property r5 : Byte
				property r1 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : diversified?m3r11r18r5
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S3
					event ev : diversified?m3r1a
					action do
						r1 = ev.r1
						a = ev.a
					end
					transition -> S2
					event ev : diversified?m3r11r18r5bis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S2
					event ev : diversified?m3r11r18r5bisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S2
					event ev : diversified?m3r11r18r5bisbisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S2
					event ev : diversified?m3r11r18r5bisbisbisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r1a
					action do
						r1 = ev.r1
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : diversified?m3r11r18r5
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S4
					event ev : diversified?m3r11r18r5bis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S4
					event ev : diversified?m3r11r18r5bisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S4
					event ev : diversified?m3r11r18r5bisbisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
					transition -> S4
					event ev : diversified?m3r11r18r5bisbisbisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
						r5 = ev.r5
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r1, a, rnd(), rnd(), rnd(), rnd(), r18, r11, r5)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bis_from_m3bisr1_and_m3bisr19r5r13a init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property r19 : Byte
				property r5 : Byte
				property r13 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3bisr1
					action do
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m3bisr19r5r13a
					action do
						r19 = ev.r19
						r5 = ev.r5
						r13 = ev.r13
						a = ev.a
					end
					transition -> S2
					event ev : app?m3bisr1bis
					action do
						r1 = ev.r1
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3bisr19r5r13a
					action do
						r19 = ev.r19
						r5 = ev.r5
						r13 = ev.r13
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3bisr1
					action do
						r1 = ev.r1
					end
					transition -> S4
					event ev : app?m3bisr1bis
					action do
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bis(rnd(), r5, rnd(), rnd(), r1, r13, r19, a, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m3r11r18r5_from_m3r11r18r5r11r18_and_m3r11r18r5r5 init INIT {
			composite state INIT init S1 {
				property r11 : Byte
				property r18 : Byte
				property r5 : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r11r18r5r11r18
					action do
						r11 = ev.r11
						r18 = ev.r18
					end
					transition -> S3
					event ev : app?m3r11r18r5r5
					action do
						r5 = ev.r5
					end
					transition -> S2
					event ev : app?m3r11r18r5r11r18bis
					action do
						r11 = ev.r11
						r18 = ev.r18
					end
					transition -> S2
					event ev : app?m3r11r18r5r11r18bisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r11r18r5r5
					action do
						r5 = ev.r5
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r11r18r5r11r18
					action do
						r11 = ev.r11
						r18 = ev.r18
					end
					transition -> S4
					event ev : app?m3r11r18r5r11r18bis
					action do
						r11 = ev.r11
						r18 = ev.r18
					end
					transition -> S4
					event ev : app?m3r11r18r5r11r18bisbis
					action do
						r11 = ev.r11
						r18 = ev.r18
					end
				}
				state S4 @diversify "not" {
					on entry do
						if (rnd()< 212) do
							diversified!m3r11r18r5(r11, rnd(), r18, r5, rnd(), rnd(), rnd())
						end
						else do
							if (rnd()< 113) do
								diversified!m3r11r18r5bis(r18, rnd(), r11, rnd(), rnd(), rnd(), r5)
							end
							else do
								if (rnd()< 72) do
									diversified!m3r11r18r5bisbis(r11, rnd(), rnd(), r5, rnd(), r18, rnd())
								end
								else do
									if (rnd()< 42) do
										diversified!m3r11r18r5bisbisbis(rnd(), rnd(), r5, rnd(), r11, rnd(), r18)
									end
									else do
										diversified!m3r11r18r5bisbisbisbis(rnd(), rnd(), r5, rnd(), r11, rnd(), r18)
									end
								end
							end
						end
					end
					transition -> S1
				}
			}
		}
		region generate_m3r1a_from_m3r1ar1_and_m3r1aa init INIT {
			composite state INIT init S1 {
				property r1 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3r1ar1
					action do
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m3r1aa
					action do
						a = ev.a
					end
					transition -> S2
					event ev : app?m3r1ar1bis
					action do
						r1 = ev.r1
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r1aa
					action do
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3r1ar1
					action do
						r1 = ev.r1
					end
					transition -> S4
					event ev : app?m3r1ar1bis
					action do
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3r1a(rnd(), rnd(), a, rnd(), r1, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
