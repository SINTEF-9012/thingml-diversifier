datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "short"
thing fragment Msgs {
	message m2(c : Byte, r0 : Integer, b : Byte@upsize "not", a : Byte@upsize "not", r3 : Byte)
	@code "0xAD"
	message m3(r4 : Byte, a : Byte, r1 : Integer)
	@code "0xAE"
	message m1(d : Byte, a : Byte@upsize "not", c : Byte, r2 : Byte, e : Byte, b : Byte@upsize "not", r5 : Byte)
	@code "0xAF"
	message m3a(a : Byte, r6 : Byte)
	@code "0xB0"
	message m3r1(r7 : Byte, r1 : Integer)
	@code "0xB1"
	message m1r2cbd(r2 : Byte, r8 : Byte, d : Byte, c : Byte, b : Byte @upsize "not")
	@code "0xB2"
	message m1ae(a : Byte @upsize "not", r9 : Byte, e : Byte)
	@code "0xB3"
	message m2b(r10 : Byte, b : Byte @upsize "not")
	@code "0xB4"
	message m2ar0c(c : Byte, r11 : Byte, r0 : Integer, a : Byte @upsize "not")
	@code "0xB5"
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}
thing App includes Msgs {
	provided port app {
		sends m3a
	sends m3r1 receives m1r2cbd receives m1ae
		receives m2b receives m2ar0c
	}
	internal port diversified {
		sends m1 sends m2b sends m2ar0c sends m2 receives m1 receives m2b receives m2ar0c receives m2
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				do
					do
						println "-80" , ", " , id , ", " , rnd(), ", "
						app!m3a(id, rnd())
					end
					do
						println "-79" , ", " , rnd(), ", " , rnd(), ", "
						app!m3r1(rnd(), rnd())
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m1_from_m1r2cbd_and_m1ae init INIT {
			composite state INIT init S1 {
				property r2 : Byte
				property c : Byte
				property b : Byte
				property d : Byte
				property a : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1r2cbd
					action do
						r2 = ev.r2
						c = ev.c
						b = ev.b
						d = ev.d
					end
					transition -> S3
					event ev : app?m1ae
					action do
						a = ev.a
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1ae
					action do
						a = ev.a
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1r2cbd
					action do
						r2 = ev.r2
						c = ev.c
						b = ev.b
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(d, a, c, r2, e, b, rnd())
					end
					transition -> S1
				}
			}
		}
		region generate_m2_from_m2b_and_m2ar0c init INIT {
			composite state INIT init S1 {
				property b : Byte
				property a : Byte
				property r0 : Integer
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2b
					action do
						b = ev.b
					end
					transition -> S3
					event ev : app?m2ar0c
					action do
						a = ev.a
						r0 = ev.r0
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2ar0c
					action do
						a = ev.a
						r0 = ev.r0
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2b
					action do
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(c, r0, b, a, rnd())
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs {
	required port app {
		sends m1r2cbd sends m1ae
		sends m2b sends m2ar0c receives m3a
	receives m3r1
	}
	internal port diversified {
		sends m3 receives m3
	}
	property counter : Integer = 0
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				do
					do
						println "-78" , ", " , rnd(), ", " , rnd(), ", " , _d , ", " , _c , ", " , _b , ", "
						app!m1r2cbd(rnd(), rnd(), _d, _c, _b)
					end
					do
						println "-77" , ", " , _a , ", " , rnd(), ", " , _e , ", "
						app!m1ae(_a, rnd(), _e)
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				do
					do
						println "-76" , ", " , rnd(), ", " , _b , ", "
						app!m2b(rnd(), _b)
					end
					do
						println "-75" , ", " , _c , ", " , rnd(), ", " , rnd(), ", " , _a , ", "
						app!m2ar0c(_c, rnd(), rnd(), _a)
					end
				end
				counter ++
			end
			transition -> STOP
			guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3a_and_m3r1 init INIT {
			composite state INIT init S1 {
				property a : Byte
				property r1 : Integer
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3a
					action do
						a = ev.a
					end
					transition -> S3
					event ev : app?m3r1
					action do
						r1 = ev.r1
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r1
					action do
						r1 = ev.r1
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3a
					action do
						a = ev.a
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(rnd(), a, r1)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
