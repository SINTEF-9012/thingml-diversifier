datatype Byte<1>
@type_checker "Byte"
@java_type "byte";

datatype Integer<2>
@type_checker "Integer"
@java_type "short";


protocol Default;

thing fragment Msgs {
	message m1(a : Byte, b : Byte, c : Byte, d : Byte, e : Byte)
	message m2(a : Byte, b : Byte, c : Byte)
	message m3(a : Byte)
	message m4(a : Byte, b : Byte, c : Byte, d : Byte, e : Byte)
	message m5(a : Byte, b : Byte, c : Byte)
	message m6(a : Byte)
	message m7()
}

thing App includes Msgs {

	provided port app {
		receives m1, m2
		sends m3
	}

	function a(b : Byte) do
		app!m3(b)
	end

	statechart init INIT {
		state INIT {
			internal event e : app?m1
			action app!m3(e.a)

			internal event e : app?m2
			action a(e.b)
		}
	}

}

thing Client includes Msgs {

	required port app {
		sends m1, m2
		receives m3
	}

	function a() app!m1(0xFF, 0xFF, 0xFF, 0xFF, 0xFF)

	function b() do
		app!m2(0xFF, 0xFF, 0xFF)
	end

}

configuration test {
	instance app : App
	instance client1 : Client
	instance client2 : Client

	connector client1.app => app.app
	connector client2.app => app.app
}
