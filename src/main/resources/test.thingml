datatype Byte<1>
@type_checker "Byte"
@java_type "byte";

datatype Integer<2>
@type_checker "Integer"
@java_type "short";

protocol Default;

thing fragment Msgs {
	message m1(a : Byte@upsize "not", b : Byte@upsize "not", c : Byte, d : Byte, e : Byte)
	message m2(a : Byte@upsize "not", b : Byte@upsize "not", c : Byte)
	message m3(a : Byte)
	
	function rnd() : Byte do 
		return `Math.floor(Math.random() * Math.floor(256))`
	end
}

thing App includes Msgs {
	
	property id : Byte

	provided port app {
		receives m1, m2
		sends m3
	}

	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : app?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(", e.a, ", ", e.b, ", ", e.c, ", ", e.d, ", ", e.e, ")!"
			end
		}
			
		state WaitForM2 {
			transition -> SendAck
			event e : app?m2
			action println "#APP: Ooh, I needed that app?m2(", e.a, ", ", e.b, ", ", e.c, ")!"
		}
			
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(", id, ")!"
				app!m3(id)
			end
				
			transition -> WaitForM1
		}
	}

}

thing Client includes Msgs {
	
	property counter : Integer = 0
	
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	
	required port app {
		sends m1, m2
		receives m3
	}

	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		
		state RUN {
			on entry do
				_c = rnd()
				_d = rnd()
				_e = rnd()
				println "#CLI: Come get some app!m1(", _a, ", ", _b, ", ", _c, ", ", _d, ", ", _e, ")!"
				app!m1(_a, _b, _c, _d, _e)
				println "#CLI: Come get some app!m2(", _a, ", ", _b, ", ", _c, ")!"
				app!m2(_a, _b, _c)
				counter++
			end
			
			transition -> STOP
			guard counter == 100
			
			transition -> RUN
			event e : app?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(", e.a, ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			
			transition -> ERROR
			event e : app?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(", e.a, ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		
		final state STOP {
			on entry println "#CLI: What are you waitin for? Christmas?"
		}
		
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
	}

}

configuration test {
	instance app : App
	instance client1 : Client

	connector client1.app => app.app
}
