import "timer.thingml" from stl

thing fragment ControllerMsgs {

	message velocity(dx : Int16, dy : Int16)
	message position(x : Int16, y : Int16)
}

thing fragment Controller includes ControllerMsgs {
	property bytesSentCounter : UInt32 = 0
	
	abstract function rnd() : Byte
	
	provided port controls {
		sends position
	}
}

thing fragment IAControllerMsg {
	message updateIA(ballx:Int16, bally: Int16, padx:Int16, pady: Int16)
}

thing fragment IAController includes Controller, IAControllerMsg {
	required port game {
		receives updateIA
	}
}

thing fragment BasicIAController includes IAController 
@stdout_sync "true"
{

	property ctrlx : Int16 = 0

	statechart SC init Following {

		state Following {

			on entry controls!position(ctrlx, 0)

			transition -> Following event e : game?updateIA
			action do
				if (e.ballx > e.padx+400) ctrlx = ctrlx + 4
				else if (e.ballx < e.padx-400) ctrlx = ctrlx - 4
				if (ctrlx < -100) ctrlx = -100
				else if (ctrlx > 100) ctrlx = 100
			end
		}
	}
}
