import "MedicalGW.thingml"

thing MainJava includes Main 
@stdout_sync "true"
{
	function kill() do	
	println ">done in ", stop-start, "ms!"
	println ">usedMem:", usedMemory()
  	`System.exit(0);`
  	end
	
	function timestamp() : UInt32 return `System.currentTimeMillis()` as UInt32
	
	function usedMemory() : UInt32 do
		`System.runFinalization();
		System.gc();`
		return `Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()` as UInt32
	end
}

thing fragment RndJava {
	function rnd() : Byte do
		return `Math.floor(Math.random() * Math.floor(246)) + 5` as Byte
	end
}

thing TelluCloudMockJava includes TelluCloudMock, RndJava @stdout_sync "true" {}
thing WeightMockupJava includes WeightMockup, RndJava @stdout_sync "true" {}
thing BloodPressureMockupJava includes BloodPressureMockup, RndJava @stdout_sync "true" {}

configuration MedicalGW
@docker
{
  instance main                   : MainJava
		set main.DEBUG_BIN_ID = 0x00
  instance log : NoEncryptConsoleLogger
		set log.ACTIVATE_ON_STARTUP = true
		set log.HAS_SIGNED_BYTE = true
  connector main.log=>log.log	  
  
  instance tellu : TelluCloudMockJava
  	set tellu.DEBUG_BIN_ID = 0x01
  connector tellu.log=>log.log	
  
  /* Devices */  
  instance weightmockup : WeightMockupJava
  	set main.DEBUG_BIN_ID = 0x02
  connector weightmockup.Tellu => tellu.TelluWeight
  connector weightmockup.log=>log.log	
  
  instance bpmockup : BloodPressureMockupJava
  	set main.DEBUG_BIN_ID = 0x03
  connector bpmockup.Tellu => tellu.TelluBloodPressure
  connector bpmockup.log=>log.log	
  
  
  connector main.ANDUC352BLE => weightmockup.ANDUC352BLE
  connector main.ANDUA651BLE => bpmockup.ANDUA651BLE
  
  instance timer : TimerJava
  	//set timer.SOFT_TIMER_PERIOD = 4
  	
  connector bpmockup.timer => timer.timer
  connector weightmockup.timer => timer.timer
  connector tellu.timer => timer.timer
}
