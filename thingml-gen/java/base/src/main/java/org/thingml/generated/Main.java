/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;
public class Main {
//Things
public static Client Client_client1;
public static App App_app;
public static void main(String args[]) {
//Things
Client_client1 = (Client) new Client("client1 (Client)", (java.util.Random) (new java.util.Random()), (long) (System.currentTimeMillis()), (byte)0, (long) (0), (byte)0, (byte)0, (byte)0, (byte)0).buildBehavior(null, null);
App_app = (App) new App("app (App)", (java.util.Random) (new java.util.Random()), (byte)0).buildBehavior(null, null);
//Connecting internal ports...
//Connectors
App_app.getApp_port().addListener(Client_client1.getApp_port());
Client_client1.getApp_port().addListener(App_app.getApp_port());
//Init instances (queues, etc)
Client_client1.init();
App_app.init();
//Network components for external connectors
/*$NETWORK$*/
//External Connectors
/*$EXT CONNECTORS$*/
/*$START$*/
App_app.start();
Client_client1.start();
//Hook to stop instances following client/server dependencies (clients firsts)
Runtime.getRuntime().addShutdownHook(new Thread() {
public void run() {
Client_client1.stop();
App_app.stop();
/*$STOP$*/
}
});

}
}
