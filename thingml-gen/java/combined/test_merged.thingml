datatype Byte<1>
	@type_checker "Byte"
	@java_type "byte"
datatype Integer<2>
	@type_checker "Integer"
	@java_type "long"
object Random @java_type "java.util.Random"
thing fragment Msgs {
	message m2(r0 : Byte, r1 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", c : Byte)
	@code "0x00"
	message m3(r4 : Byte, r5 : Byte, r2 : Byte, r3 : Byte, a : Byte)
	@code "0x01"
	message m1(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte, e : Byte)
	@code "0x02"
	message m2bis(r0 : Byte, r1 : Byte, a : Byte @upsize "not", b : Byte @upsize "not", c : Byte)
	@code "0x03"
	message m3bis(r4 : Byte, r5 : Byte, r2 : Byte, r3 : Byte, a : Byte)
	@code "0x04"
	message m1bis(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, d : Byte, e : Byte)
	@code "0x05"
	message m2r0r1(r6 : Byte, r0 : Byte, r7 : Byte, r8 : Byte, r1 : Byte)
	@code "0x06"
	message m2abc(a : Byte @upsize "not", r10 : Byte, b : Byte @upsize "not", r9 : Byte, c : Byte)
	@code "0x07"
	message m3_(r13 : Byte, r15 : Byte, r12 : Byte, r14 : Byte, r11 : Byte)
	@code "0x08"
	message m3r4r5r2r3a(r4 : Byte, r5 : Byte, r2 : Byte, r3 : Byte, a : Byte)
	@code "0x09"
	message m1abcd(a : Byte @upsize "not", b : Byte @upsize "not", c : Byte, r16 : Byte, d : Byte)
	@code "0x0A"
	message m1e(r18 : Byte, r19 : Byte, r20 : Byte, r17 : Byte, e : Byte)
	@code "0x0B"
	message m2bisr0r1ab(r21 : Byte, r0 : Byte, r1 : Byte, a : Byte @upsize "not", b : Byte @upsize "not")
	@code "0x0C"
	message m2bisc(r24 : Byte, r22 : Byte, r23 : Byte, r25 : Byte, c : Byte)
	@code "0x0D"
	message m3bis_(r29 : Byte, r28 : Byte, r30 : Byte, r27 : Byte, r26 : Byte)
	@code "0x0E"
	message m3bisr4r5r2r3a(r4 : Byte, r5 : Byte, r2 : Byte, r3 : Byte, a : Byte)
	@code "0x0F"
	message m1bisabcd(a : Byte @upsize "not", r31 : Byte, b : Byte @upsize "not", c : Byte, d : Byte)
	@code "0x10"
	message m1bise(r32 : Byte, r35 : Byte, r33 : Byte, r34 : Byte, e : Byte)
	@code "0x11"
	readonly property rnd : Random = `new java.util.Random()`
	function rnd() : Byte do
		return `(byte) ` & rnd & `.nextInt(256)`
	end
}
thing App includes Msgs @stdout_sync "true" {
	provided port app {
		sends m3_ sends m3r4r5r2r3a sends m3bis_ sends m3bisr4r5r2r3a receives m2r0r1 receives m2abc receives m1abcd receives m1e receives m2bisr0r1ab receives m2bisc receives m1bisabcd receives m1bise
	}
	internal port diversified {
		sends m2 sends m1abcd sends m1e sends m1 sends m2bisr0r1ab sends m2bisc sends m2bis sends m1bisabcd sends m1bise sends m1bis receives m2 receives m1abcd receives m1e receives m1 receives m2bisr0r1ab receives m2bisc receives m2bis receives m1bisabcd receives m1bise receives m1bis
	}
	property id : Byte
	statechart init WaitForM1 {
		state WaitForM1 {
			transition -> WaitForM2
			event e : diversified?m1
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
			transition -> WaitForM2
			event e : diversified?m1bis
			action do
				id = e.a
				println "#APP: Ooh, I needed that app?m1(" , e.a , ", " , e.b , ", " , e.c , ", " , e.d , ", " , e.e , ")!"
			end
		}
		state WaitForM2 {
			transition -> SendAck
			event e : diversified?m2
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
			transition -> SendAck
			event e : diversified?m2bis
			action println "#APP: Ooh, I needed that app?m2(" , e.a , ", " , e.b , ", " , e.c , ")!"
		}
		state SendAck {
			on entry do
				println "#APP: Come get some app!m3(" , id , ")!"
				if (rnd()< 74) do
					if (rnd()< 69) do
						do
							println "8" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3_(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							println "9" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
							app!m3r4r5r2r3a(rnd(), rnd(), rnd(), rnd(), id)
						end
					end
					else do
						do
							println "9" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
							app!m3r4r5r2r3a(rnd(), rnd(), rnd(), rnd(), id)
						end
						do
							println "8" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3_(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
				end
				else do
					if (rnd()< 248) do
						do
							println "14" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3bis_(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							println "15" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
							app!m3bisr4r5r2r3a(rnd(), rnd(), rnd(), rnd(), id)
						end
					end
					else do
						do
							println "15" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , id , ", "
							app!m3bisr4r5r2r3a(rnd(), rnd(), rnd(), rnd(), id)
						end
						do
							println "14" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m3bis_(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
				end
			end
			transition -> WaitForM1
		}
		region generate_m2_from_m2r0r1_and_m2abc init INIT {
			composite state INIT init S1 {
				property r0 : Byte
				property r1 : Byte
				property a : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2r0r1
					action do
						r0 = ev.r0
						r1 = ev.r1
					end
					transition -> S3
					event ev : app?m2abc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2abc
					action do
						a = ev.a
						b = ev.b
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2r0r1
					action do
						r0 = ev.r0
						r1 = ev.r1
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2(r0, r1, a, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1_from_m1abcd_and_m1e init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1abcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
					transition -> S3
					event ev : app?m1e
					action do
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1e
					action do
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1abcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
		region generate_m2bis_from_m2bisr0r1ab_and_m2bisc init INIT {
			composite state INIT init S1 {
				property r0 : Byte
				property r1 : Byte
				property a : Byte
				property b : Byte
				property c : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m2bisr0r1ab
					action do
						r0 = ev.r0
						r1 = ev.r1
						a = ev.a
						b = ev.b
					end
					transition -> S3
					event ev : app?m2bisc
					action do
						c = ev.c
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m2bisc
					action do
						c = ev.c
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m2bisr0r1ab
					action do
						r0 = ev.r0
						r1 = ev.r1
						a = ev.a
						b = ev.b
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m2bis(r0, r1, a, b, c)
					end
					transition -> S1
				}
			}
		}
		region generate_m1bis_from_m1bisabcd_and_m1bise init INIT {
			composite state INIT init S1 {
				property a : Byte
				property b : Byte
				property c : Byte
				property d : Byte
				property e : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m1bisabcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
					transition -> S3
					event ev : app?m1bise
					action do
						e = ev.e
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m1bise
					action do
						e = ev.e
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m1bisabcd
					action do
						a = ev.a
						b = ev.b
						c = ev.c
						d = ev.d
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m1bis(a, b, c, d, e)
					end
					transition -> S1
				}
			}
		}
	}
}
thing Client includes Msgs @stdout_sync "true" {
	required port app {
		sends m2r0r1 sends m2abc sends m1abcd sends m1e sends m2bisr0r1ab sends m2bisc sends m1bisabcd sends m1bise receives m3_ receives m3r4r5r2r3a receives m3bis_ receives m3bisr4r5r2r3a
	}
	internal port diversified {
		sends m3 sends m3bis_ sends m3bisr4r5r2r3a sends m3bis receives m3 receives m3bis_ receives m3bisr4r5r2r3a receives m3bis
	}
	property counter : Integer = 0
	property start : Integer = `System.currentTimeMillis()`
	property _a : Byte
	property _b : Byte
	property _c : Byte
	property _d : Byte
	property _e : Byte
	statechart init RUN {
		on entry do
			_a = rnd()
			_b = rnd()
		end
		state RUN {
			on entry do
				_c = rnd()% 100
				_d = rnd()% 50
				_e = rnd()% 25
				println "#CLI: Come get some app!m1(" , _a , ", " , _b , ", " , _c , ", " , _d , ", " , _e , ")!"
				if (rnd()< 211) do
					if (rnd()< 62) do
						do
							println "10" , ", " , _a , ", " , _b , ", " , _c , ", " , rnd(), ", " , _d , ", "
							app!m1abcd(_a, _b, _c, rnd(), _d)
						end
						do
							println "11" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", "
							app!m1e(rnd(), rnd(), rnd(), rnd(), _e)
						end
					end
					else do
						do
							println "11" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", "
							app!m1e(rnd(), rnd(), rnd(), rnd(), _e)
						end
						do
							println "10" , ", " , _a , ", " , _b , ", " , _c , ", " , rnd(), ", " , _d , ", "
							app!m1abcd(_a, _b, _c, rnd(), _d)
						end
					end
				end
				else do
					if (rnd()< 184) do
						do
							println "16" , ", " , _a , ", " , rnd(), ", " , _b , ", " , _c , ", " , _d , ", "
							app!m1bisabcd(_a, rnd(), _b, _c, _d)
						end
						do
							println "17" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", "
							app!m1bise(rnd(), rnd(), rnd(), rnd(), _e)
						end
					end
					else do
						do
							println "17" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _e , ", "
							app!m1bise(rnd(), rnd(), rnd(), rnd(), _e)
						end
						do
							println "16" , ", " , _a , ", " , rnd(), ", " , _b , ", " , _c , ", " , _d , ", "
							app!m1bisabcd(_a, rnd(), _b, _c, _d)
						end
					end
				end
				println "#CLI: Come get some app!m2(" , _a , ", " , _b , ", " , _c , ")!"
				if (rnd()< 39) do
					if (rnd()< 230) do
						do
							println "6" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r0r1(rnd(), rnd(), rnd(), rnd(), rnd())
						end
						do
							println "7" , ", " , _a , ", " , rnd(), ", " , _b , ", " , rnd(), ", " , _c , ", "
							app!m2abc(_a, rnd(), _b, rnd(), _c)
						end
					end
					else do
						do
							println "7" , ", " , _a , ", " , rnd(), ", " , _b , ", " , rnd(), ", " , _c , ", "
							app!m2abc(_a, rnd(), _b, rnd(), _c)
						end
						do
							println "6" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", "
							app!m2r0r1(rnd(), rnd(), rnd(), rnd(), rnd())
						end
					end
				end
				else do
					if (rnd()< 21) do
						do
							println "12" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", " , _b , ", "
							app!m2bisr0r1ab(rnd(), rnd(), rnd(), _a, _b)
						end
						do
							println "13" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", "
							app!m2bisc(rnd(), rnd(), rnd(), rnd(), _c)
						end
					end
					else do
						do
							println "13" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _c , ", "
							app!m2bisc(rnd(), rnd(), rnd(), rnd(), _c)
						end
						do
							println "12" , ", " , rnd(), ", " , rnd(), ", " , rnd(), ", " , _a , ", " , _b , ", "
							app!m2bisr0r1ab(rnd(), rnd(), rnd(), _a, _b)
						end
					end
				end
				counter ++
			end
			transition -> STOP guard counter == 100
			transition -> RUN
			event e : diversified?m3
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
			transition -> RUN
			event e : diversified?m3bis
			guard e.a == _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: We meet again, Doctor Jones!"
			end
			transition -> ERROR
			event e : diversified?m3bis
			guard e.a != _a
			action do
				println "#CLI: Ooh, I needed that app?m3(" , e.a , ")!"
				println "#CLI: Damn, you re ugly."
			end
		}
		final state STOP {
			on entry do
				println "#CLI: What are you waitin for? Christmas?"
				var stop : Integer = `System.currentTimeMillis()`
				println "#CLI: took " , stop - start , "ms."
			end
		}
		final state ERROR {
			on entry println "#CLI: Heh, heh, heh... what a mess!"
		}
		region generate_m3_from_m3__and_m3r4r5r2r3a init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property r5 : Byte
				property r2 : Byte
				property r3 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3_
					action do
					end
					transition -> S3
					event ev : app?m3r4r5r2r3a
					action do
						r4 = ev.r4
						r5 = ev.r5
						r2 = ev.r2
						r3 = ev.r3
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3r4r5r2r3a
					action do
						r4 = ev.r4
						r5 = ev.r5
						r2 = ev.r2
						r3 = ev.r3
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3_
					action do
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3(r4, r5, r2, r3, a)
					end
					transition -> S1
				}
			}
		}
		region generate_m3bis_from_m3bis__and_m3bisr4r5r2r3a init INIT {
			composite state INIT init S1 {
				property r4 : Byte
				property r5 : Byte
				property r2 : Byte
				property r3 : Byte
				property a : Byte
				state S1 @diversify "not" {
					transition -> S2
					event ev : app?m3bis_
					action do
					end
					transition -> S3
					event ev : app?m3bisr4r5r2r3a
					action do
						r4 = ev.r4
						r5 = ev.r5
						r2 = ev.r2
						r3 = ev.r3
						a = ev.a
					end
				}
				state S2 @diversify "not" {
					transition -> S4
					event ev : app?m3bisr4r5r2r3a
					action do
						r4 = ev.r4
						r5 = ev.r5
						r2 = ev.r2
						r3 = ev.r3
						a = ev.a
					end
				}
				state S3 @diversify "not" {
					transition -> S4
					event ev : app?m3bis_
					action do
					end
				}
				state S4 @diversify "not" {
					on entry do
						diversified!m3bis(r4, r5, r2, r3, a)
					end
					transition -> S1
				}
			}
		}
	}
}
protocol Default ;

configuration test {
	instance app : App
	instance client1 : Client
	connector client1.app => app . app
}
